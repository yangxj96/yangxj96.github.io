<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Docker】安装到自定义位置,释放C盘空间</title>
    <link href="/Docker/DockerCustomInstall/"/>
    <url>/Docker/DockerCustomInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="0-为啥要安装到其他位置"><a href="#0-为啥要安装到其他位置" class="headerlink" title="0.为啥要安装到其他位置"></a>0.为啥要安装到其他位置</h1><p>占用空间实在太大了,C盘承受不住</p><h1 id="1-创建软连接"><a href="#1-创建软连接" class="headerlink" title="1.创建软连接"></a>1.创建软连接</h1><blockquote><p>建立软连接,保证安装后可以从默认路径进行访问</p></blockquote><p>软件安装目录</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/1.png" alt="软件安装目录"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mklink /j &quot;C:\Program Files\Docker” &quot;你要存放的路径&quot;<br></code></pre></td></tr></table></figure><p>储镜像路径</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/2.png" alt="储镜像路径"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mklink /j &quot;C:\Users\yangxj\AppData\Local\Docker” &quot;你要存放的路径&quot;<br></code></pre></td></tr></table></figure><blockquote><p>注: 这个路径中的yangxj是你的用户名的路径,AppData默认是隐藏文件夹,<br>直接在路径中输入AppDta进入或者显示隐藏文件夹才能看到</p></blockquote><p>建立软连接的注意事项:</p><ol><li>是否以管理员身份打开的命令行?</li><li>必须使用CMD,因为mklink命令在CMD中才可使用</li><li>目标路径下是否已经有命令行里的目录,例如:命令 mklink &#x2F;j “C:\Program Files\Docker” “D:\Docker”中，D:\Docker这个目标路径要已经存在,即这个文件夹已经存在; </li><li>源路径必须不存在，即: C:\Program Files\Docker 必须不存在，否则提示:文件夹已存在;</li></ol><h1 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2.安装软件"></a>2.安装软件</h1><p>保险起见,使用命令安装,指定安装位置,如D:\Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start /w &quot;&quot; &quot;Docker Desktop Installer.exe&quot; install --installation-dir=你要存放的路径<br></code></pre></td></tr></table></figure><h1 id="3-安装后查看"><a href="#3-安装后查看" class="headerlink" title="3.安装后查看"></a>3.安装后查看</h1><p>安装位置:</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/3.png" alt="储镜像路径"></p><p>数据位置:</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/4.png" alt="储镜像路径"><br><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/5.png" alt="储镜像路径"></p><p>软连的安装位置</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/6.png" alt="储镜像路径"></p><p>软连的数据存放<br><img src="https://www.yangxj96.com/minio/yangxj96-blog/Docker/DockerCustomInstall/7.png" alt="储镜像路径"></p><blockquote><p>至此,安装结束,就不用占用C盘的空间,而是占用软连链接的位置.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring】定制GenericJackson2JsonRedisSerializer的mapper</title>
    <link href="/Spring/SpringCustomGenericJackson2JsonRedisSerializerMapper/"/>
    <url>/Spring/SpringCustomGenericJackson2JsonRedisSerializerMapper/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>在使用Spring Boot Cache的时候,我们会自定义序列化方式,而spring boot cache提供了一个<br><strong>GenericJackson2JsonRedisSerializer</strong>让我们使用</p><p>这个类默认内部的ObjectMapper 有一些他自定义的配置.如果贸然更改,容易造成序列化和反序列化的错误. </p><p>但是在存储Java8提供的新的时间类的时候,会报错,因为他内部的ObjectMapper并没有注册jsr310提供的时间模块.</p><p>同时,它也没提供类似 GenericJackson2JsonRedisSerializer.getObjectMapper的方法</p><p>但是提供了其他方式的获取到它内部的ObjectMapper的一个方法</p><blockquote><p>这个它配置好的mapper可以序列化泛型,配置起来实在是麻烦,所以最好就直接用它配置好的,如果有定制内容,<br>直接想办法去修改它配置好的mapper,而不是说自定new一个mapper进行替换.</p></blockquote><h1 id="1-对应源码"><a href="#1-对应源码" class="headerlink" title="1.对应源码"></a>1.对应源码</h1><p>源码中有这样的一个方法,可以让我们获取到它内部的ObjectMapper</p><p>用来对它进行扩展定制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Builder method used to configure and customize the internal Jackson &#123;<span class="hljs-doctag">@link</span> ObjectMapper&#125; created by</span><br><span class="hljs-comment"> * this &#123;<span class="hljs-doctag">@link</span> GenericJackson2JsonRedisSerializer&#125; and used to de/serialize &#123;<span class="hljs-doctag">@link</span> Object objects&#125;</span><br><span class="hljs-comment"> * as &#123;<span class="hljs-doctag">@literal</span> JSON&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> objectMapperConfigurer &#123;<span class="hljs-doctag">@link</span> Consumer&#125; used to configure and customize the internal &#123;<span class="hljs-doctag">@link</span> ObjectMapper&#125;;</span><br><span class="hljs-comment"> * must not be &#123;<span class="hljs-doctag">@literal</span> null&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> this &#123;<span class="hljs-doctag">@link</span> GenericJackson2JsonRedisSerializer&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the &#123;<span class="hljs-doctag">@link</span> Consumer&#125; used to configure and customize</span><br><span class="hljs-comment"> * the internal &#123;<span class="hljs-doctag">@link</span> ObjectMapper&#125; is &#123;<span class="hljs-doctag">@literal</span> null&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> GenericJackson2JsonRedisSerializer <span class="hljs-title function_">configure</span><span class="hljs-params">(Consumer&lt;ObjectMapper&gt; objectMapperConfigurer)</span> &#123;<br><br>  Assert.notNull(objectMapperConfigurer,<br>    <span class="hljs-string">&quot;Consumer used to configure and customize ObjectMapper must not be null&quot;</span>);<br><br>  objectMapperConfigurer.accept(getObjectMapper());<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-解决时间序列化提示jsr310"><a href="#2-解决时间序列化提示jsr310" class="headerlink" title="2.解决时间序列化提示jsr310"></a>2.解决时间序列化提示jsr310</h1><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>serializer.configure(om -&gt; &#123;<br>    om.registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><p>kotlin:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> serializer = GenericJackson2JsonRedisSerializer()<br>serializer.configure &#123;<br>    it.registerModule(JavaTimeModule())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis】MyBatis使用TypeHandle对Geometry进行操作</title>
    <link href="/MyBatis/MyBatisTypeHandlerPostGIS/"/>
    <url>/MyBatis/MyBatisTypeHandlerPostGIS/</url>
    
    <content type="html"><![CDATA[<h1 id="0-项目环境"><a href="#0-项目环境" class="headerlink" title="0.项目环境"></a>0.项目环境</h1><h2 id="0-1-build-gradle-kts文件重点如下"><a href="#0-1-build-gradle-kts文件重点如下" class="headerlink" title="0.1 build.gradle.kts文件重点如下"></a>0.1 build.gradle.kts文件重点如下</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">repositories &#123;<br>    <span class="hljs-comment">// 第一步的,需要加入下面两个仓库,且需要放在最前面,因为有个依赖aliyun下载不下来</span><br>    maven &#123; url = uri(<span class="hljs-string">&quot;https://repo.osgeo.org/repository/release/&quot;</span>) &#125;<br>    maven &#123; url = uri(<span class="hljs-string">&quot;https://repo.osgeo.org/repository/snapshot/&quot;</span>) &#125;<br>    maven &#123; url = uri(<span class="hljs-string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>) &#125;<br>    mavenCentral()<br>&#125;<br><br>dependencies &#123;<br>    <span class="hljs-comment">// 数据库相关用到的依赖如下</span><br>    implementation(<span class="hljs-string">&quot;com.baomidou:mybatis-plus-boot-starter:3.5.4&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;org.jetbrains:annotations:24.0.0&quot;</span>)<br>    runtimeOnly(<span class="hljs-string">&quot;org.postgresql:postgresql&quot;</span>)<br>    <span class="hljs-comment">// geom工具类</span><br>    implementation(<span class="hljs-string">&quot;net.postgis:postgis-jdbc:2021.1.0&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;org.geotools:gt-geometry:24.7&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;org.geotools:gt-geojson:24.7&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="1-实现一个自己的BaseTypeHandler"><a href="#1-实现一个自己的BaseTypeHandler" class="headerlink" title="1.实现一个自己的BaseTypeHandler"></a>1.实现一个自己的BaseTypeHandler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.kmlpkj.smart.village.api.configuration.mybatis.handler<br><br><span class="hljs-keyword">import</span> cn.hutool.extra.spring.SpringUtil<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType<br><span class="hljs-keyword">import</span> org.geotools.geojson.geom.GeometryJSON<br><span class="hljs-keyword">import</span> org.locationtech.jts.io.ByteOrderValues<br><span class="hljs-keyword">import</span> org.locationtech.jts.io.WKBReader<br><span class="hljs-keyword">import</span> org.locationtech.jts.io.WKBWriter<br><span class="hljs-keyword">import</span> org.postgresql.util.PGobject<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory<br><span class="hljs-keyword">import</span> java.sql.CallableStatement<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement<br><span class="hljs-keyword">import</span> java.sql.ResultSet<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Geom字段格式化处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeomTypeHandler</span> : BaseTypeHandler&lt;Any&gt;() &#123;<br><br>    companion object &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">val</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>::class.java)<br>    &#125;<br><br>    override fun <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(rs: ResultSet?, columnName: String?)</span>: Any? &#123;<br>        rs?.getString(columnName)?.let &#123;<br>            <span class="hljs-keyword">return</span> convert(it)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br><br>    override fun <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(rs: ResultSet?, columnIndex: Int)</span>: Any? &#123;<br>        rs?.getString(columnIndex)?.let &#123;<br>            <span class="hljs-keyword">return</span> convert(it)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br><br>    override fun <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(cs: CallableStatement?, columnIndex: Int)</span>: Any? &#123;<br>         cs?.getString(columnIndex)?.let &#123;<br>            <span class="hljs-keyword">return</span> convert(it)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br><br>    override fun <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(ps: PreparedStatement?, i: Int, parameter: Any?, jdbcType: JdbcType?)</span> &#123;<br>        <span class="hljs-type">val</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> SpringUtil.getBean(ObjectMapper::class.java)<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">geom</span> <span class="hljs-operator">=</span> GeometryJSON(<span class="hljs-number">10</span>).read(om.readTree(parameter.toString()).toPrettyString())<br>            geom.srid = <span class="hljs-number">4490</span><br>            <span class="hljs-type">val</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> WKBWriter(<span class="hljs-number">2</span>, ByteOrderValues.BIG_ENDIAN, <span class="hljs-literal">true</span>)<br>            <span class="hljs-type">val</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> writer.write(geom)<br>            <span class="hljs-type">val</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> WKBWriter.toHex(bytes)<br>            ps?.setObject(i, PGobject().also &#123;<br>                it.type = <span class="hljs-string">&quot;geometry&quot;</span><br>                it.value = s1<br>            &#125;)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            e.printStackTrace()<br>            <span class="hljs-keyword">throw</span> RuntimeException(<span class="hljs-string">&quot;转换geom字段失败&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> fun <span class="hljs-title function_">convert</span><span class="hljs-params">(wkb: String)</span>: Any &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">geom</span> <span class="hljs-operator">=</span> WKBReader().read(WKBReader.hexToBytes(wkb))<br>            <span class="hljs-type">val</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> GeometryJSON(<span class="hljs-number">10</span>).toString(geom)<br>            <span class="hljs-keyword">return</span> SpringUtil.getBean(ObjectMapper::class.java).readTree(str)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            e.printStackTrace()<br>            <span class="hljs-keyword">throw</span> RuntimeException(<span class="hljs-string">&quot;转换geom字段失败&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-在对应的实体上加入TypeHandler"><a href="#2-在对应的实体上加入TypeHandler" class="headerlink" title="2.在对应的实体上加入TypeHandler"></a>2.在对应的实体上加入TypeHandler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 第一 需要在@TableName注解中启用autoResultMap = true</span><br><span class="hljs-comment">// 第二 需要在@TableField注解中指定typeHandler</span><br><br><span class="hljs-meta">@TableName(value = &quot;xx&quot;, autoResultMap = true)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Grid</span> &#123;<br>    <span class="hljs-meta">@TableField(value = &quot;geom&quot;, typeHandler = GeomTypeHandler::class)</span><br>    <span class="hljs-keyword">var</span> geom: Any? = <span class="hljs-literal">null</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-在对于Mapper中指定TypeHandler"><a href="#3-在对于Mapper中指定TypeHandler" class="headerlink" title="3.在对于Mapper中指定TypeHandler"></a>3.在对于Mapper中指定TypeHandler</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kmlpkj.smart.village.api.mapper.GridMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在typeHandler中指定我们的文件,这里是不是必须得我没尝试,但是我都加上了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;geom&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;OTHER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;geom&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;xxx.GeomTypeHandler&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="4-对应的格式说明"><a href="#4-对应的格式说明" class="headerlink" title="4.对应的格式说明"></a>4.对应的格式说明</h1><h2 id="4-1-入参格式"><a href="#4-1-入参格式" class="headerlink" title="4.1 入参格式"></a>4.1 入参格式</h2><p>入参格式如下,只需要传GeoJSON格式中的具体的geometry字段的内容即可</p><p>格式内容支持:Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon和GeometryCollection</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Polygon&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;coordinates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">[</span><br>        <span class="hljs-number">104.03273502416919</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-number">23.810639861962807</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-应用后查询格式说明"><a href="#4-2-应用后查询格式说明" class="headerlink" title="4.2 应用后查询格式说明"></a>4.2 应用后查询格式说明</h2><p>查询后的格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;geom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Polygon&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;coordinates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">[</span><br>          <span class="hljs-number">105.3362898252</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">23.8315432677</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Docker】Linux中Docker下Minio启动提示权限不足</title>
    <link href="/Docker/DockerMinioPermissionDenied/"/>
    <url>/Docker/DockerMinioPermissionDenied/</url>
    
    <content type="html"><![CDATA[<h1 id="0-出现的原因"><a href="#0-出现的原因" class="headerlink" title="0.出现的原因:"></a>0.出现的原因:</h1><p> 官方说明中,容器内部,minio使用的是1001的一个用户权限进行操作,</p><p> 所以映射目录有会有权限不足的情况</p><p> 原文如下:</p><p><a href="https://hub.docker.com/r/bitnami/minio">NOTE: As this is a non-root container, the mounted files and directories must have the proper permissions for the UID 1001.</a></p><h1 id="1-解决方案"><a href="#1-解决方案" class="headerlink" title="1.解决方案"></a>1.解决方案</h1><h2 id="1-1-对于启动命令或者docker-compose-yml中的操作"><a href="#1-1-对于启动命令或者docker-compose-yml中的操作" class="headerlink" title="1.1 对于启动命令或者docker-compose.yml中的操作"></a>1.1 对于启动命令或者docker-compose.yml中的操作</h2><h3 id="1-1-1-docker命令直接启动"><a href="#1-1-1-docker命令直接启动" class="headerlink" title="1.1.1 docker命令直接启动"></a>1.1.1 docker命令直接启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>  --privileged=true \<br>  --restart=always \<br>  -e TZ=Asia/Shanghai \<br>  -e MINIO_ROOT_USER=XXX \<br>  -e MINIO_ROOT_PASSWORD=XXX \<br>  -p &quot;9000:9000&quot; \<br>  -p &quot;9001:9001&quot;  \<br>  -v &quot;/data/minio/data:/data&quot; \<br>  -v &quot;/data/minio/config:/root/.minio&quot;<br>  -name minio \<br>  bitnami/minio:2023.7.18<br></code></pre></td></tr></table></figure><h3 id="1-1-2-docker-compose-yml"><a href="#1-1-2-docker-compose-yml" class="headerlink" title="1.1.2 docker-compose.yml"></a>1.1.2 docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">minio:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">bitnami/minio:2023.7.18</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">minio</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-comment"># 在docker-compose.yml中需要添加这个命令</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001:9001&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MINIO_ROOT_USER=XXX</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MINIO_ROOT_PASSWORD=XXX</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/data/minio/data:/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/data/minio/config:/root/.minio&quot;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-对于映射目录的操作"><a href="#1-2-对于映射目录的操作" class="headerlink" title="1.2 对于映射目录的操作"></a>1.2 对于映射目录的操作</h2><ol><li>把需要的目录都创建好,比如需要映射data和config目录:<ol><li><code>/data/minio/data</code></li><li><code>/data/minio/config </code></li></ol></li><li>包含子文件夹的授权 <code>chown -R 1001:1001 /data/minio</code></li></ol><blockquote><p>注意: 一定要把文件夹都先创建好,不然容器启动后容器创建的用户组和权限都会是root,而不是1001,导致启动失败;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Docker】Docker Nacos PostgreSQL版本</title>
    <link href="/Docker/DockerNacosPostgreSQL/"/>
    <url>/Docker/DockerNacosPostgreSQL/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p><a href="https://hub.docker.com/r/nacos/nacos-server">原版链接</a></p><p>具体的变量内容查看原版即可,只是我这边新增了几个变量 </p><p>用于适配PostgreSQL数据库</p><p>构建脚本是从<a href="https://github.com/nacos-group/nacos-docker">Nacos Docker</a>克隆后</p><p>在build文件夹下的构建脚本构建的.进行过一些修改</p><p><a href="https://github.com/yangxj96/nacos-server-pgsql-docker">当前镜像构建脚本仓库链接</a></p><h1 id="1-新增的环境变量"><a href="#1-新增的环境变量" class="headerlink" title="1.新增的环境变量"></a>1.新增的环境变量</h1><table><thead><tr><th align="left">变量名</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">PGSQL_URL</td><td align="left">JDBC URL</td><td align="left">jdbc:postgresql:&#x2F;&#x2F;localhost:5432&#x2F;db?currentSchema&#x3D;schema</td></tr><tr><td align="left">PGSQL_USERNAME</td><td align="left">数据库用户名</td><td align="left">postgres</td></tr><tr><td align="left">PGSQL_PASSWORD</td><td align="left">数据库密码</td><td align="left">postgres</td></tr></tbody></table><h1 id="2-docker-compose运行示例"><a href="#2-docker-compose运行示例" class="headerlink" title="2.docker-compose运行示例"></a>2.docker-compose运行示例</h1><h2 id="2-1-docker-compose-文件"><a href="#2-1-docker-compose-文件" class="headerlink" title="2.1 docker-compose 文件"></a>2.1 docker-compose 文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">yangxj96/nacos-service-pgsql:v2.2.2-2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-pgsql</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">env_file:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/Nacos/env/pgsql.env&quot;</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/Nacos/logs/:/home/nacos/logs&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-pgsql-env"><a href="#2-2-pgsql-env" class="headerlink" title="2.2 pgsql.env"></a>2.2 pgsql.env</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PREFER_HOST_MODE=ip</span><br><span class="hljs-string">SPRING_DATASOURCE_PLATFORM=postgresql</span><br><span class="hljs-string">PGSQL_URL=jdbc:postgresql://localhost:5432/db?currentSchema=schema</span><br><span class="hljs-string">PGSQL_USERNAME=postgres</span><br><span class="hljs-string">PGSQL_PASSWORD=postgres</span><br></code></pre></td></tr></table></figure><h1 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h1><ul><li>caused: Incorrect result size: expected 1, actual 2;</li></ul><blockquote><p>目前发现这个问题应该是2.2.3版本的数据库有过改动,可以在<a href="https://github.com/yangxj96/nacos-server-pgsql-docker">当前镜像构建脚本仓库链接</a>的schema文件夹下获取到pgsql的导入脚本,<br>具体步骤为: </p><ol><li>在现有的nacos中把配置文件等内容导出,</li><li>清空nacos连接的数据库,</li><li>使用schema文件夹下的脚本进行初始化</li><li>导入配置文件等内容</li></ol></blockquote><h1 id="4-更新日志"><a href="#4-更新日志" class="headerlink" title="4.更新日志"></a>4.更新日志</h1><h3 id="v2-2-3-dragonwell"><a href="#v2-2-3-dragonwell" class="headerlink" title="v2.2.3-dragonwell"></a>v2.2.3-dragonwell</h3><ul><li>添加了以龙威11为java jdk的2.2.3版本</li><li>下载命令 <code>docker pull yangxj96/nacos-server-pgsql:v2.2.3-dragonwell</code></li></ul><h3 id="v2-2-3"><a href="#v2-2-3" class="headerlink" title="v2.2.3"></a>v2.2.3</h3><ul><li>更新nacos包到2.2.3版本</li></ul><h3 id="v2-2-2-2"><a href="#v2-2-2-2" class="headerlink" title="v2.2.2-2"></a>v2.2.2-2</h3><blockquote><p>之前下载后使用大概1.1GB左右,本次更新主要为缩小镜像大小</p></blockquote><ul><li>切换基础镜像到<code>amazoncorretto:8u362-alpine3.17-jre</code>,大小只有150M左右</li><li>优化一些操作,缩小包内容</li><li>整体镜像缩减到278.7MB</li></ul><h3 id="v2-2-2-1"><a href="#v2-2-2-1" class="headerlink" title="v2.2.2-1"></a>v2.2.2-1</h3><ul><li>修复docker 23.0.3 版本下无法运行</li><li>添加 <code>NACOS_AUTH_TOKEN,NACOS_AUTH_IDENTITY_KEY,NACOS_AUTH_IDENTITY_VALUE</code>的默认值(和官方默认值一样)</li></ul><h3 id="v2-2-2"><a href="#v2-2-2" class="headerlink" title="v2.2.2"></a>v2.2.2</h3><blockquote><p>初始版本</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【CPP】微软全家桶 Winform在VS2022中操作注册表的ClassesRoot项提示权限不足</title>
    <link href="/CPP/WinFormClassesRootPermissionDenied/"/>
    <url>/CPP/WinFormClassesRootPermissionDenied/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>在VS2022中的Winform项目中,使用 <code>Registry.ClassesRoot.CreateSubKey</code> 进行注册表相关操作的时候,提示权限不足的错误,但是在vs2022中没有了在属性中直接勾选安全的内容,同时在.NET 6中的Winform项目中,默认没有创建<code>app.manifest</code>文件,所以像我这样的新手会一下子手足无措,无法找到相应的页面进行处理</p><h1 id="1-解决方式"><a href="#1-解决方式" class="headerlink" title="1.解决方式"></a>1.解决方式</h1><blockquote><p>手动创建<code>app.manifest</code>文件</p></blockquote><h2 id="1-1-创建app-manifest文件"><a href="#1-1-创建app-manifest文件" class="headerlink" title="1.1 创建app.manifest文件"></a>1.1 创建<code>app.manifest</code>文件</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/WinFormClassesRootPermissionDenied1.png" alt="在这里插入图片描述"><br><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/WinFormClassesRootPermissionDenied2.png" alt="在这里插入图片描述"></p><blockquote><p>默认名称就是<code>app.manifest</code></p></blockquote><h2 id="1-2-修改权限"><a href="#1-2-修改权限" class="headerlink" title="1.2 修改权限"></a>1.2 修改权限</h2><p>文件的权限注释中已经说明了.<br>把原来的<code>&lt;requestedExecutionLevel level=&quot;asInvoker&quot; uiAccess=&quot;false&quot; /&gt;</code> 替换为<code>&lt;requestedExecutionLevel  level=&quot;requireAdministrator&quot; uiAccess=&quot;false&quot; /&gt;</code>即可.<br>替换后进行编译运行,会提示你以管理员的方式重启VS,重启后既可以正常操作<code>ClassesRoot</code>相关的注册表内容.而且应用也会多一个管理员的标识.如下所示</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/WinFormClassesRootPermissionDenied3.png" alt="在这里插入图片描述"></p><h1 id="2-修改后的文件-↓"><a href="#2-修改后的文件-↓" class="headerlink" title="2.修改后的文件 ↓"></a>2.修改后的文件 ↓</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">assemblyIdentity</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0.0&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyApplication.app&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">trustInfo</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">requestedPrivileges</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- UAC 清单选项</span><br><span class="hljs-comment">             如果想要更改 Windows 用户帐户控制级别，请使用</span><br><span class="hljs-comment">             以下节点之一替换 requestedExecutionLevel 节点。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;requestedExecutionLevel  level=&quot;asInvoker&quot; uiAccess=&quot;false&quot; /&gt;</span><br><span class="hljs-comment">        &lt;requestedExecutionLevel  level=&quot;requireAdministrator&quot; uiAccess=&quot;false&quot; /&gt;</span><br><span class="hljs-comment">        &lt;requestedExecutionLevel  level=&quot;highestAvailable&quot; uiAccess=&quot;false&quot; /&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            指定 requestedExecutionLevel 元素将禁用文件和注册表虚拟化。</span><br><span class="hljs-comment">            如果你的应用程序需要此虚拟化来实现向后兼容性，则移除此</span><br><span class="hljs-comment">            元素。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;requestedExecutionLevel level=&quot;asInvoker&quot; uiAccess=&quot;false&quot; /&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">requestedExecutionLevel</span>  <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;requireAdministrator&quot;</span> <span class="hljs-attr">uiAccess</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">requestedPrivileges</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">security</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">trustInfo</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">compatibility</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:compatibility.v1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 设计此应用程序与其一起工作且已针对此应用程序进行测试的</span><br><span class="hljs-comment">           Windows 版本的列表。取消评论适当的元素，</span><br><span class="hljs-comment">           Windows 将自动选择最兼容的环境。 --&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- Windows Vista --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;supportedOS Id=&quot;&#123;e2011457-1546-43c5-a5fe-008deee3d3f0&#125;&quot; /&gt;--&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- Windows 7 --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;supportedOS Id=&quot;&#123;35138b9a-5d96-4fbd-8e2d-a2440225f93a&#125;&quot; /&gt;--&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- Windows 8 --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;supportedOS Id=&quot;&#123;4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38&#125;&quot; /&gt;--&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- Windows 8.1 --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;supportedOS Id=&quot;&#123;1f676c76-80e1-4239-95bb-83d0f6d0da78&#125;&quot; /&gt;--&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- Windows 10 --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;supportedOS Id=&quot;&#123;8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a&#125;&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">compatibility</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 指示该应用程序可感知 DPI 且 Windows 在 DPI 较高时将不会对其进行</span><br><span class="hljs-comment">       自动缩放。Windows Presentation Foundation (WPF)应用程序自动感知 DPI，无需</span><br><span class="hljs-comment">       选择加入。选择加入此设置的 Windows 窗体应用程序(面向 .NET Framework 4.6)还应</span><br><span class="hljs-comment">       在其 app.config 中将 &quot;EnableWindowsFormsHighDpiAutoResizing&quot; 设置设置为 &quot;true&quot;。</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       将应用程序设为感知长路径。请参阅 https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation --&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  &lt;application xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class="hljs-comment">    &lt;windowsSettings&gt;</span><br><span class="hljs-comment">      &lt;dpiAware xmlns=&quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&quot;&gt;true&lt;/dpiAware&gt;</span><br><span class="hljs-comment">      &lt;longPathAware xmlns=&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;&gt;true&lt;/longPathAware&gt;</span><br><span class="hljs-comment">    &lt;/windowsSettings&gt;</span><br><span class="hljs-comment">  &lt;/application&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 启用 Windows 公共控件和对话框的主题(Windows XP 和更高版本) --&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  &lt;dependency&gt;</span><br><span class="hljs-comment">    &lt;dependentAssembly&gt;</span><br><span class="hljs-comment">      &lt;assemblyIdentity</span><br><span class="hljs-comment">          type=&quot;win32&quot;</span><br><span class="hljs-comment">          name=&quot;Microsoft.Windows.Common-Controls&quot;</span><br><span class="hljs-comment">          version=&quot;6.0.0.0&quot;</span><br><span class="hljs-comment">          processorArchitecture=&quot;*&quot;</span><br><span class="hljs-comment">          publicKeyToken=&quot;6595b64144ccf1df&quot;</span><br><span class="hljs-comment">          language=&quot;*&quot;</span><br><span class="hljs-comment">        /&gt;</span><br><span class="hljs-comment">    &lt;/dependentAssembly&gt;</span><br><span class="hljs-comment">  &lt;/dependency&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【IDE】idea gradle lombok找不到符号</title>
    <link href="/IDE/IDEAGradleLombok/"/>
    <url>/IDE/IDEAGradleLombok/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><blockquote><p>IDEA中使用Gradle管理依赖,导入Lombok的时候运行第一次正常运行,有了build文件夹后,再次运行提示找不到符号,网上一般有四种解决办法,如果无法解决在尝试我的方式</p></blockquote><h1 id="1-网上常见的解决办法"><a href="#1-网上常见的解决办法" class="headerlink" title="1 网上常见的解决办法"></a>1 网上常见的解决办法</h1><h2 id="1-1-装上Lombok插件后重启"><a href="#1-1-装上Lombok插件后重启" class="headerlink" title="1.1 装上Lombok插件后重启"></a>1.1 装上Lombok插件后重启</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/IDEAGradleLombok1.png" alt="在这里插入图片描述"></p><blockquote><p>不过现在新版本的IDEA中,Lombok插件已经是内置插件了</p></blockquote><h2 id="1-2-在build-gradle的dependencies中添加如下依赖"><a href="#1-2-在build-gradle的dependencies中添加如下依赖" class="headerlink" title="1.2 在build.gradle的dependencies中添加如下依赖"></a>1.2 在build.gradle的dependencies中添加如下依赖</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/IDEAGradleLombok2.png" alt="在这里插入图片描述"></p><blockquote><p>compileOnly annotationProcessor  testCompileOnly  testAnnotationProcessor 几个关键字呢在新版本的Gradle已经被Implementation代替了.具体如图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">implementation(<span class="hljs-string">&quot;org.projectlombok:lombok:1.18.26&quot;</span>)<br>annotationProcessor(<span class="hljs-string">&quot;org.projectlombok:lombok:1.18.26&quot;</span>)<br>testImplementation(<span class="hljs-string">&quot;org.projectlombok:lombok:1.18.26&quot;</span>)<br>testAnnotationProcessor(<span class="hljs-string">&quot;org.projectlombok:lombok:1.18.26&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>部署到jenkins需要把带annotation的注释掉</p></blockquote><h2 id="1-3-启用注解处理"><a href="#1-3-启用注解处理" class="headerlink" title="1.3 启用注解处理"></a>1.3 启用注解处理</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/IDEAGradleLombok3.png" alt="在这里插入图片描述"></p><blockquote><p>注意左边红框两个都要选中后勾选启用注解处理</p></blockquote><h2 id="1-4-切换到Intellij-IDEA处理"><a href="#1-4-切换到Intellij-IDEA处理" class="headerlink" title="1.4 切换到Intellij IDEA处理"></a>1.4 切换到Intellij IDEA处理</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/IDEAGradleLombok4.png" alt="在这里插入图片描述"></p><h2 id="1-5-如果以上都不行-则尝试这个方法"><a href="#1-5-如果以上都不行-则尝试这个方法" class="headerlink" title="1.5 如果以上都不行,则尝试这个方法"></a>1.5 如果以上都不行,则尝试这个方法</h2><ol><li>需要检查lombok插件</li><li>勾选启用注解处理</li><li>添加lombok依赖</li><li>恢复gradle中使用此工具构建和运行到默认的Gradle</li><li>在勾选启用注解处理的地方,在勾选上在编译java(-proc:only模式)之前,在单独的步骤中运行处理器(在Default模块和Gradle Imported模块都要勾选)</li></ol><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/IDEAGradleLombok5.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【IDE】Visual Studio git提交代码时使用GPG</title>
    <link href="/IDE/VSGitGPG/"/>
    <url>/IDE/VSGitGPG/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>下载安装GPG的过程省略,直接开始进行配置</p><h2 id="0-1-visual-studio-版本说明"><a href="#0-1-visual-studio-版本说明" class="headerlink" title="0.1 visual studio 版本说明"></a>0.1 visual studio 版本说明</h2><blockquote><p>其余版本未测试,但是应该也是可以的</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/VSGitGPG1.png" alt="在这里插入图片描述"></p><h2 id="1-获取GPG的密钥ID"><a href="#1-获取GPG的密钥ID" class="headerlink" title="1.获取GPG的密钥ID"></a>1.获取GPG的密钥ID</h2><h3 id="1-1-window下可以打开Kleopatra查看生成好的密钥的密钥ID"><a href="#1-1-window下可以打开Kleopatra查看生成好的密钥的密钥ID" class="headerlink" title="1.1 window下可以打开Kleopatra查看生成好的密钥的密钥ID"></a>1.1 window下可以打开Kleopatra查看生成好的密钥的密钥ID</h3><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE//VSGitGPG2.png" alt="在这里插入图片描述"></p><h3 id="1-2-也可以从命令行中获取"><a href="#1-2-也可以从命令行中获取" class="headerlink" title="1.2 也可以从命令行中获取"></a>1.2 也可以从命令行中获取</h3><blockquote><p> gpg –list-keys</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE//VSGitGPG3.png" alt="在这里插入图片描述"></p><p>红框位置,后16位就是密钥ID</p><h1 id="2-配置-gitconfig"><a href="#2-配置-gitconfig" class="headerlink" title="2.配置.gitconfig"></a>2.配置.gitconfig</h1><blockquote><p>文件位置,window下在:C:\Users\你的用户名\.gitconfig</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/IDE/VSGitGPG4.png" alt="在这里插入图片描述"></p><p>红框位置要进行配置,email的邮箱地址要和生成密钥的时候添加的GPG的邮箱一致</p>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【CPP】Clion配置QT相关外部工具</title>
    <link href="/CPP/ClionConfigExternalTools/"/>
    <url>/CPP/ClionConfigExternalTools/</url>
    
    <content type="html"><![CDATA[<h1 id="1-QT设计师-Qt-Designer"><a href="#1-QT设计师-Qt-Designer" class="headerlink" title="1.QT设计师(Qt Designer)"></a>1.QT设计师(Qt Designer)</h1><h5 id="网上多数办法"><a href="#网上多数办法" class="headerlink" title="网上多数办法"></a>网上多数办法</h5><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/ClionConfigExternalTools1.png" alt="在这里插入图片描述"></p><ul><li>实参:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$FilePath$<br></code></pre></td></tr></table></figure></li><li>工作目录:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ProjectFileDir$<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>此方法有个问题,如果是多级目录,有一定问题出现找不到UI文件,解决办法如下</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/ClionConfigExternalTools2.png" alt="在这里插入图片描述"></p><blockquote><p>其中实参选择$FilePath$,工作目录选择$ProjectFileDir$,亲测有效</p></blockquote><h1 id="2-Qt-UIC"><a href="#2-Qt-UIC" class="headerlink" title="2.Qt UIC"></a>2.Qt UIC</h1><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/ClionConfigExternalTools3.png" alt="在这里插入图片描述"></p><ul><li>实参:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$FileName$ -o ui_$FileNameWithoutAllExtensions$.h<br></code></pre></td></tr></table></figure></li><li>工作目录:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ProjectFileDir$<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-Qt-RCC"><a href="#3-Qt-RCC" class="headerlink" title="3.Qt RCC"></a>3.Qt RCC</h1><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/ClionConfigExternalTools4.png" alt="在这里插入图片描述"></p><ul><li>实参:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">--binary $FileName$ -o $FileNameWithoutExtension$.rcc<br></code></pre></td></tr></table></figure></li><li>工作目录:<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ProjectFileDir$<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【FE】element plus table中双击编辑后回车和失去焦点绑定同一个事件会导致执行两次</title>
    <link href="/FE/ElementPlusTableDoubleClickExecuteTwice/"/>
    <url>/FE/ElementPlusTableDoubleClickExecuteTwice/</url>
    
    <content type="html"><![CDATA[<h1 id="0-场景复现"><a href="#0-场景复现" class="headerlink" title="0.场景复现"></a>0.场景复现</h1><h2 id="0-1-项目环境"><a href="#0-1-项目环境" class="headerlink" title="0.1 项目环境"></a>0.1 项目环境</h2><ul><li>VUE3</li><li>Vite</li><li>TypeScript</li><li>Element Plus</li></ul><h2 id="0-2-相关代码"><a href="#0-2-相关代码" class="headerlink" title="0.2 相关代码"></a>0.2 相关代码</h2><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/FrontEndDevelopment/ElementPlusTableDoubleClickExecuteTwice0.png" alt="原始代码"></p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/FrontEndDevelopment/ElementPlusTableDoubleClickExecuteTwice1.png" alt="控制台打印两次执行信息"></p><h1 id="1-原因分析"><a href="#1-原因分析" class="headerlink" title="1.原因分析"></a>1.原因分析</h1><p>回车时候执行了一次,然后input矿失去了焦点,再次触发了相同的事件</p><p>可能是TypeScript环境的问题,导致直接在回车事件中使用$event.target.blur报错.</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h1><p>回车的事件重新绑定一个方法</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/FrontEndDevelopment/ElementPlusTableDoubleClickExecuteTwice2.png" alt="绑定方法"></p><p>方法中主动触发blur事件</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/FrontEndDevelopment/ElementPlusTableDoubleClickExecuteTwice3.png" alt="blur触发"></p><p>折腾半天,只能这样处理,如果有其他更方便的解决方式,请留言. 感谢~</p>]]></content>
    
    
    <categories>
      
      <category>FE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring】解决actuator访问gateway相关端点404</title>
    <link href="/Spring/GatewayActuator404/"/>
    <url>/Spring/GatewayActuator404/</url>
    
    <content type="html"><![CDATA[<h1 id="0-场景复现"><a href="#0-场景复现" class="headerlink" title="0.场景复现"></a>0.场景复现</h1><h2 id="0-1-spring-cloud-版本"><a href="#0-1-spring-cloud-版本" class="headerlink" title="0.1 spring cloud 版本"></a>0.1 spring cloud 版本</h2><p>2022.0.0-RC2</p><h2 id="0-2-配置文件"><a href="#0-2-配置文件" class="headerlink" title="0.2 配置文件"></a>0.2 配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 端点检查放开所有</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><h1 id="1-原因分析"><a href="#1-原因分析" class="headerlink" title="1.原因分析"></a>1.原因分析</h1><p>配置文件改了.</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br>    <span class="hljs-comment"># 重点在这里,默认为false,所以没有gateway相关端点,打开后就可以访问</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring】RestTemplate中postForEntity其中参数为数组或者List</title>
    <link href="/Spring/RestTemplatePostForEntityParamArray/"/>
    <url>/Spring/RestTemplatePostForEntityParamArray/</url>
    
    <content type="html"><![CDATA[<h1 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h1><blockquote><p>RestTemplate.postForEntity() 方法中的参数有数组或者List</p></blockquote><blockquote><p>因为是对接其他人的接口,不知道服务端是怎么写的, 也不知道是什么语言写的<br>所以其他办法不对,可以尝试下这个方法</p></blockquote><h1 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h1><h2 id="1-1-spring-boot-版本"><a href="#1-1-spring-boot-版本" class="headerlink" title="1.1 spring boot 版本"></a>1.1 spring boot 版本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-RestTemplate-创建Bean"><a href="#1-2-RestTemplate-创建Bean" class="headerlink" title="1.2 RestTemplate 创建Bean"></a>1.2 RestTemplate 创建Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">(RestTemplateBuilder builder)</span> &#123;<br>  <span class="hljs-keyword">return</span> builder.additionalMessageConverters(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonHttpMessageConverter</span>()).build();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-参数入参时-重点"><a href="#1-3-参数入参时-重点" class="headerlink" title="1.3 参数入参时(重点)"></a>1.3 参数入参时(重点)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MultiValueMap&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>params.add(<span class="hljs-string">&quot;access_token&quot;</span>      , token);<br>params.addAll(<span class="hljs-string">&quot;username[]&quot;</span>     , usernames);<br></code></pre></td></tr></table></figure><blockquote><p>重点说明:<br>  1.需要使用addAll添加参数<br>  2.key需要在key的值后加[]<br>  3.value需要为list类型</p></blockquote><h1 id="2-完整示例"><a href="#2-完整示例" class="headerlink" title="2.完整示例"></a>2.完整示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> JSONArray <span class="hljs-title function_">accountDetails</span><span class="hljs-params">(String token, List&lt;String&gt; usernames)</span> &#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;<br>  <span class="hljs-comment">// @formatter:off</span><br>  MultiValueMap&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>  params.add(<span class="hljs-string">&quot;access_token&quot;</span>  , token);<br>  params.addAll(<span class="hljs-string">&quot;username[]&quot;</span> , usernames);<br>  <span class="hljs-comment">// @formatter:on</span><br>  <span class="hljs-type">JSONObject</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> (JSONObject) restTemplateUtils.post(url, params, JSONObject.class);<br>  log.info(<span class="hljs-string">&quot;查询响应:&#123;&#125;&quot;</span>, json.toJSONString());<br>  <span class="hljs-keyword">if</span> (json.getInteger(<span class="hljs-string">&quot;ret&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> json.getJSONObject<span class="hljs-string">&quot;data&quot;</span>).getJSONArray(<span class="hljs-string">&quot;data&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 封装的post通用部分</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> url    请求路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params 参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz  响应类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 请求成功返回body, 请求失败抛出异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">post</span><span class="hljs-params">(String url, MultiValueMap&lt;String, Object&gt; params, Class&lt;?&gt; clazz)</span> &#123;<br>  <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>  headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br>  HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(params, headers);<br>  ResponseEntity&lt;?&gt; response = restTemplate.postForEntity(url, request, clazz);<br>  <span class="hljs-keyword">if</span> (response.getStatusCode() != HttpStatus.OK) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseStatusException</span>(response.getStatusCode(), <span class="hljs-string">&quot;请求出错&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> response.getBody();<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="发个牢骚"><a href="#发个牢骚" class="headerlink" title="发个牢骚"></a>发个牢骚</h6><p>所有的博客都是互相抄啊抄,就不能自己有点探索精神么</p><p>从下午查询资料,到现在快2点.百度也好,谷歌也好,来来回回就那么几个重复的答案</p><p>写代码真难</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring】addResourceHandlers(ResourceHandlerRegistry registry)中文无法访问</title>
    <link href="/Spring/SpringBootAddResourceHandlers/"/>
    <url>/Spring/SpringBootAddResourceHandlers/</url>
    
    <content type="html"><![CDATA[<h1 id="0-问题复现"><a href="#0-问题复现" class="headerlink" title="0.问题复现"></a>0.问题复现</h1><p>使用Spring Boot配置映射静态资源目录后,英文和数字可以正常进行访问,但是中文就提示404</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>  registry.addResourceHandler(<span class="hljs-string">&quot;/file/video/**&quot;</span>).addResourceLocations(props.getVideoFolder());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h1><p>原文<a href="https://blog.csdn.net/ngl272/article/details/122458262">传送门</a>,有分析过程</p><h2 id="1-1-UrlPathHelper-设置-UrlDecode-为false"><a href="#1-1-UrlPathHelper-设置-UrlDecode-为false" class="headerlink" title="1.1 UrlPathHelper 设置 UrlDecode 为false"></a>1.1 UrlPathHelper 设置 UrlDecode 为false</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br>        UrlPathHelper urlPathHelper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>        urlPathHelper.setUrlDecode(<span class="hljs-literal">false</span>);<br>        urlPathHelper.setDefaultEncoding(StandardCharsets.UTF_8.name());<br>        configurer.setUrlPathHelper(urlPathHelper);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;  <br>        registry.addResourceHandler(<span class="hljs-string">&quot;/files/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;file:E:/FileUpload/HmiInterface/&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-2-使用原来的AntPathMatcher-（推荐）"><a href="#1-2-使用原来的AntPathMatcher-（推荐）" class="headerlink" title="1.2 使用原来的AntPathMatcher （推荐）"></a>1.2 使用原来的AntPathMatcher （推荐）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure><blockquote><p>版本问题,最为致命</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring】SpringBoot添加Converter解析器中使用lambda表达式代替匿名内部类是启动报错： does the class parameterize those types?</title>
    <link href="/Spring/SpringLambdaAddConverterError/"/>
    <url>/Spring/SpringLambdaAddConverterError/</url>
    
    <content type="html"><![CDATA[<h1 id="0-场景复现"><a href="#0-场景复现" class="headerlink" title="0.场景复现"></a>0.场景复现</h1><h2 id="0-1-相关代码"><a href="#0-1-相关代码" class="headerlink" title="0.1 相关代码"></a>0.1 相关代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注入自定义的LocalDateTime转换器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 时间转换器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="hljs-title function_">localDateTimeConverter</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> source -&gt; LocalDateTime.parse(source.trim(), DateTimeFormatter.ofPattern(LOCAL_DATE_TIME_FORMAT));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0-2-报错信息"><a href="#0-2-报错信息" class="headerlink" title="0.2 报错信息"></a>0.2 报错信息</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Caused by: java.lang.IllegalArgumentException: <br>Unable to determine source <span class="hljs-built_in">type</span> &lt;S&gt; and target <span class="hljs-built_in">type</span> &lt;T&gt; <span class="hljs-keyword">for</span> your Converter [<span class="hljs-type">com.example.demo126.config.MappingConverterAdapter</span><span class="hljs-variable">$</span><span class="hljs-variable">$Lambda</span><span class="hljs-variable">$522</span>/<span class="hljs-number">817994751</span>];<br>does the <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">parameterize</span> <span class="hljs-title">those</span> <span class="hljs-title">types</span>?</span><br></code></pre></td></tr></table></figure><h1 id="1-原因分析"><a href="#1-原因分析" class="headerlink" title="1.原因分析"></a>1.原因分析</h1><ol><li>web项目启动注册requestMappingHandlerAdapter的时候会初始化WebBindingInitializer</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());<br></code></pre></td></tr></table></figure><ol start="2"><li>而ConfigurableWebBindingInitializer需要FormattingConversionService, 而FormattingConversionService会将所有的Converter添加进来<br>添加的时候需要获取泛型信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;<br>        registry.addConverter(converter);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;<br>         registry.addConverter(converter);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;<br>        registry.addFormatter(formatter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>添加Converter.class 一般是通过接口获取两个泛型的具体类型，</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ResolvableType <span class="hljs-title function_">as</span><span class="hljs-params">(Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == NONE) &#123;<br>        <span class="hljs-keyword">return</span> NONE;<br>    &#125;<br>    Class&lt;?&gt; resolved = resolve();<br>    <span class="hljs-keyword">if</span> (resolved == <span class="hljs-literal">null</span> || resolved == type) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ResolvableType interfaceType : getInterfaces()) &#123;<br>        <span class="hljs-type">ResolvableType</span> <span class="hljs-variable">interfaceAsType</span> <span class="hljs-operator">=</span> interfaceType.as(type);<br>    <span class="hljs-keyword">if</span> (interfaceAsType != NONE) &#123;<br>        <span class="hljs-keyword">return</span> interfaceAsType;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> getSuperType().as(type);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Lambda表达式的接口是Converter<?, ?>，<strong>不能得到具体的类型</strong></li></ol><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h1><h2 id="2-1、具体类型接口-不再是泛型"><a href="#2-1、具体类型接口-不再是泛型" class="headerlink" title="2.1、具体类型接口,不再是泛型"></a>2.1、具体类型接口,不再是泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> StringToLocalDateTimeConverter <span class="hljs-title function_">localDateTimeConverter1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span>  (source -&gt;  LocalDateTime.parse((String)source, DateTimeUtils.DEFAULT_FORMATTER));<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">StringToLocalDateTimeConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、等待requestMappingHandlerAdapter注册结束在注册"><a href="#2-2、等待requestMappingHandlerAdapter注册结束在注册" class="headerlink" title="2.2、等待requestMappingHandlerAdapter注册结束在注册"></a>2.2、等待requestMappingHandlerAdapter注册结束在注册</h2><p><code>此方法在Spring Boot 3.X之后失效. 暂不清楚原因</code></p><blockquote><p>就是等requestMappingHandlerAdapterbean注册完成之后再添加自己的converter就不会注册到FormattingConversionService中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(name = &quot;requestMappingHandlerAdapter&quot;)</span><br><span class="hljs-keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="hljs-title function_">localDateTimeConverter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> source -&gt; LocalDateTime.parse(source, DateTimeUtils.DEFAULT_FORMATTER);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实在stater中进行使用则应该使用@DependsOn注解,依旧是启动顺序的问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@DependsOn(&quot;requestMappingHandlerAdapter&quot;)</span><br><span class="hljs-keyword">public</span> Converter&lt;String, Date&gt; <span class="hljs-title function_">dateConverter</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> source -&gt; DateUtil.parse(source.trim());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、自定义Converter接口"><a href="#2-3、自定义Converter接口" class="headerlink" title="2.3、自定义Converter&lt;S,T&gt;接口"></a>2.3、自定义Converter&lt;S,T&gt;接口</h2><blockquote><p>其实有点类似第一种解决方案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span>&lt;S, T&gt; &#123;<br>    <br>    T <span class="hljs-title function_">convert</span><span class="hljs-params">(S source)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如下,</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs koltin">@Configuration<br>class StringToLocalDateConverter : Converter&lt;String, LocalDate&gt; &#123;<br><br>    @Resource<br>    private lateinit var props: JacksonProperties<br><br>    override fun convert(source: String): LocalDate? &#123;<br>        if (StrUtil.isBlank(source)) &#123;<br>            return null<br>        &#125;<br>        return LocalDate.parse(source.trim &#123; it &lt;= &#x27; &#x27; &#125;, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;))<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Java】Java8中的stream流操作</title>
    <link href="/Java/Java8Stream/"/>
    <url>/Java/Java8Stream/</url>
    
    <content type="html"><![CDATA[<h1 id="1-List-相关"><a href="#1-List-相关" class="headerlink" title="1.List 相关"></a>1.List 相关</h1><h2 id="1-1-List-获取元素对象中某个属性的的集合"><a href="#1-1-List-获取元素对象中某个属性的的集合" class="headerlink" title="1.1 List 获取元素对象中某个属性的的集合"></a>1.1 List 获取元素对象中某个属性的的集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>List&lt;Long&gt; userIds = users <br>                   .stream()<br>                   .map(User::getId)<br>                   .collect(Collectors.toList())<br></code></pre></td></tr></table></figure><h2 id="1-2-List-获取元素符合条件的元素"><a href="#1-2-List-获取元素符合条件的元素" class="headerlink" title="1.2 List 获取元素符合条件的元素"></a>1.2 List 获取元素符合条件的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;User&gt; collect = users <br>                        .stream()<br>                        .filter(i -&gt; i.getId() &gt; <span class="hljs-number">10</span>)<br>                        .collect(Collectors.toList());<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Java】Object 转换 List&lt;Object&gt;</title>
    <link href="/Java/Obect2ListObject/"/>
    <url>/Java/Obect2ListObject/</url>
    
    <content type="html"><![CDATA[<h1 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users = (List&lt;User&gt;) Obj;<br></code></pre></td></tr></table></figure><p>使用的时候IDEA会提示警告 说未检查类型.</p><h1 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h1><ol><li>使用@SuperWarning({“unchecked”})进行压制</li><li>写个工具类进行转换</li></ol><h1 id="1-1-方法1"><a href="#1-1-方法1" class="headerlink" title="1.1 方法1"></a>1.1 方法1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuperWarning(&#123;&quot;unchecked&quot;&#125;)</span><br>List&lt;User&gt; users = (List&lt;User&gt;) Obj;<br></code></pre></td></tr></table></figure><h1 id="1-2-方法2"><a href="#1-2-方法2" class="headerlink" title="1.2 方法2"></a>1.2 方法2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">objConvertList</span><span class="hljs-params">(Object obj, Class&lt;T&gt; clazz)</span> &#123;<br>     List&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> List&lt;?&gt;) &#123;<br>         <span class="hljs-keyword">for</span> (Object o : (List&lt;?&gt;) obj) &#123;<br>             result.add(clazz.cast(o));<br>         &#125;<br>         <span class="hljs-keyword">return</span> result;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h3><p>个人不喜欢使用注解消除警告,因为觉得这个消除了,但是仍然存在隐患. 所以选择使用静态方法进行转换. 结果可控.</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Java】Object转换List&lt;Map&lt;String,Object&gt;&gt;</title>
    <link href="/Java/Object2ListMap/"/>
    <url>/Java/Object2ListMap/</url>
    
    <content type="html"><![CDATA[<h3 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map&lt;String,Object&gt;&gt; users = (List&lt;Map&lt;String,Object&gt;&gt;) Obj;<br></code></pre></td></tr></table></figure><p>使用的时候IDEA会提示警告 说未检查类型.</p><h3 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h3><ol><li>使用@SuperWarning({“unchecked”})进行压制</li><li>写个工具类进行转换</li></ol><h4 id="1-1-方法1"><a href="#1-1-方法1" class="headerlink" title="1.1 方法1"></a>1.1 方法1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuperWarning(&#123;&quot;unchecked&quot;&#125;)</span><br>List&lt;User&gt; users = (List&lt;User&gt;) Obj;<br></code></pre></td></tr></table></figure><h4 id="1-2-方法2"><a href="#1-2-方法2" class="headerlink" title="1.2 方法2"></a>1.2 方法2</h4><p>写的时候参考了我的 <a href="https://www.yangxj96.com/java/Obect2ListObject">Object 转换 List&lt;Object&gt;</a> 的写法,只是说在处理o的时候再次进行了转换获得每个key和value.<br>写完Object转换List<Object>后大概想了1个多小时才想到这个方式, 真的佩服自己的愚蠢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  List&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">objConvertListMap</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>      List&lt;Map&lt;String,Object&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> List&lt;?&gt;)&#123;<br>          <span class="hljs-keyword">for</span> (Object o : (List&lt;?&gt;) obj) &#123;<br>              Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br>              Class&lt;?&gt; clazz = o.getClass();<br>              <span class="hljs-keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;<br>                  field.setAccessible(<span class="hljs-literal">true</span>);<br>                  <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> field.getName();<br>                  <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(key);<br>                  <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>)&#123;<br>                      value = <span class="hljs-string">&quot;&quot;</span>;<br>                  &#125;<br>                  map.put(key,value);<br>              &#125;<br>              result.add(map);<br>          &#125;<br>          <span class="hljs-keyword">return</span> result;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>写完博文几分钟后,突然想到一个更加通用的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;V&gt; List&lt;Map&lt;String,V&gt;&gt; <span class="hljs-title function_">objConvertListMap</span><span class="hljs-params">(Object obj, Class&lt;V&gt; vClass)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>    List&lt;Map&lt;String, V&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> List&lt;?&gt;) &#123;<br>        <span class="hljs-keyword">for</span> (Object o : (List&lt;?&gt;) obj) &#123;<br>            Map&lt;String, V&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br>            Class&lt;?&gt; oClass = o.getClass();<br>            <span class="hljs-keyword">for</span> (Field field : oClass.getDeclaredFields()) &#123;<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> field.getName();<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(key);<br>                <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>                    value = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>                map.put(key, vClass.cast(value));<br>            &#125;<br>            result.add(map);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就不会局限在转换到List&lt;Map&lt;String,Object&gt;&gt;这一种类型上了.<br>可以转换成List&lt;Map&lt;String,V&gt;&gt;上等,进行泛型转换<br>虽然多了一个参数,但是可以重载啊</p><blockquote><p>注: 感觉field.get(key) 这里处理的不是很好,如果有更好的办法可以留言</p></blockquote><h4 id="1-3-方法3-感谢-凌霄。-大佬提供"><a href="#1-3-方法3-感谢-凌霄。-大佬提供" class="headerlink" title="1.3 方法3(感谢 凌霄。 大佬提供)"></a>1.3 方法3(感谢 <a href="https://blog.csdn.net/wace_610">凌霄。</a> 大佬提供)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K, V&gt; List&lt;Map&lt;K, V&gt;&gt; <span class="hljs-title function_">castListMap</span><span class="hljs-params">(Object obj, Class&lt;K&gt; kCalzz, Class&lt;V&gt; vCalzz)</span> &#123;<br>  List&lt;Map&lt;K, V&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> List&lt;?&gt;) &#123;<br>    <span class="hljs-keyword">for</span> (Object mapObj : (List&lt;?&gt;) obj) &#123;<br>      <span class="hljs-keyword">if</span> (mapObj <span class="hljs-keyword">instanceof</span> Map&lt;?, ?&gt;) &#123;<br>        Map&lt;K, V&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : ((Map&lt;?, ?&gt;) mapObj).entrySet()) &#123;<br>          map.put(kCalzz.cast(entry.getKey()), vCalzz.cast(entry.getValue()));<br>        &#125;<br>        result.add(map);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h5><p>个人不喜欢使用注解消除警告,因为觉得这个消除了,但是仍然存在隐患. 所以选择使用静态方法进行转换. 结果可控.</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Android】Could not find compile target android-33</title>
    <link href="/Android/AndroidCouldNotFindCompileTargetAndroid33/"/>
    <url>/Android/AndroidCouldNotFindCompileTargetAndroid33/</url>
    
    <content type="html"><![CDATA[<p>不废话,除网上所说修改compileSdk&#x2F;targetSdk进行降级外,<br>还有一种可能,就是android sdk损坏,需要删除损坏的目录重新下载,<br>我直接暴力删除了整个sdk的目录,进行了重新下载后成功解决,<br>如有大佬找到了具体需要只删除那个目录的请留言</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Docker】docker-compose cp cannot create regular file ‘xxxxx‘ Permission denied</title>
    <link href="/Docker/DockerPermissionDenied/"/>
    <url>/Docker/DockerPermissionDenied/</url>
    
    <content type="html"><![CDATA[<h3 id="0-问题原因"><a href="#0-问题原因" class="headerlink" title="0.问题原因"></a>0.问题原因</h3><blockquote><p>需要创建和本机的映射路径,导致权限不足</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/docker-permission-denied-1.png" alt="在这里插入图片描述"></p><h3 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h3><blockquote><p>编辑docker-compose文件 添加 privileged: true<br> 重新运行 docker-compose up -d 即可</p></blockquote><p><img src="/images/blog/DevOps/docker-permission-denied-2.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【CPP】CMake C/C++程序输出乱码</title>
    <link href="/CPP/CmakeGarbled/"/>
    <url>/CPP/CmakeGarbled/</url>
    
    <content type="html"><![CDATA[<h1 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h1><blockquote><p>Clion使用CMake进行项目管理<br>在使用中,无论使用TEXT()包裹中文或者是_T()包裹,都会乱码</p></blockquote><h1 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h1><blockquote><p>搜索得到最靠谱的解决办法:<br>在CMakeLists.txt文件中添加一个设置项</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">C的解决办法</span><br>set(CMAKE_C_FLAGS &quot;$&#123;CMAKE_C_FLAGS&#125; -Wall -fexec-charset=GBK&quot;)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">C++ 的解决办法</span><br>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wall -fexec-charset=GBK&quot;)<br></code></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000039128339">原答案传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【CPP】CMake打包后的QT程序打开出现黑窗口</title>
    <link href="/CPP/CmakeQtGuiBlackWindow/"/>
    <url>/CPP/CmakeQtGuiBlackWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="0-问题复现"><a href="#0-问题复现" class="headerlink" title="0.问题复现"></a>0.问题复现</h1><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/CmakeQtGuiBlackWindow1.png" alt="在这里插入图片描述"></p><blockquote><p>打包后使用windeployqt添加依赖之后,打开应用就会出现这样的一个黑窗口</p></blockquote><h1 id="1-问题解决"><a href="#1-问题解决" class="headerlink" title="1.问题解决"></a>1.问题解决</h1><p>在CMakeLists.txt文件的add_executable()中加上WIN32</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/CPP/CmakeQtGuiBlackWindow2.png" alt="在这里插入图片描述"></p><blockquote><p>重新打包后替换掉exe即可解决问题</p></blockquote><p><a href="https://blog.csdn.net/xiaoke0O/article/details/106532988">参考链接</a> </p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Linux】CentOS Liunx 7 下安装docker-compose</title>
    <link href="/Linux/Centos7InsertDockerCompose/"/>
    <url>/Linux/Centos7InsertDockerCompose/</url>
    
    <content type="html"><![CDATA[<h3 id="0-参考"><a href="#0-参考" class="headerlink" title="0.参考"></a>0.参考</h3><p>传送门:<a href="https://www.centos.bz/2019/01/centos7-%E5%AE%89%E8%A3%85-docker-%E5%92%8C-docker-compose/">CentOS7 安装 Docker 和 Docker-compose</a></p><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><ul><li>国内下载偶尔会抽风 下载特别慢</li></ul><h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2.解决"></a>2.解决</h3><ul><li><p>下载文章的资源 &#x2F; <a href="https://download.csdn.net/download/qq_37274323/12207453">传送门</a></p></li><li><p>解压获取到两个版本 选择liunx版本</p></li><li><p>通过Xftp或者其他方式上传到 &#x2F;usr&#x2F;local&#x2F;bin 路径<br><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-docker-compose-1.png" alt="在这里插入图片描述"></p></li><li><p>通过Xshell 重命名文件命</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /usr/local/bin/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>添加可执行权限</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -v<br></code></pre></td></tr></table></figure><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-docker-compose-2.png" alt="在这里插入图片描述"></p></li><li><p>输出版本信息则为正常安装</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Linux】CentOS Liunx 7 下安装java jdk</title>
    <link href="/Linux/Centos7InsertJdk/"/>
    <url>/Linux/Centos7InsertJdk/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1.下载jdk"></a>1.下载jdk</h1><p>下载传送门:<a href="https://download.csdn.net/download/weightman2008/10553450">jdk8</a></p><blockquote><p>不是我的资源,如果觉得太贵可以在别的地方找<br>本来我想上传一个liunx和windows两个放一起,不过超过了csdn上传文件的大小限制,单独上传liunx发现已经有资源了.</p></blockquote><h1 id="2-上传到liunx主机"><a href="#2-上传到liunx主机" class="headerlink" title="2.上传到liunx主机"></a>2.上传到liunx主机</h1><blockquote><p>推荐路径 &#x2F;usr&#x2F;local&#x2F;java<br>因为可能安装好几个版本的jdk 所以新建了个java目录</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-jdk-1.png" alt="在这里插入图片描述"></p><h1 id="3-解压tar包并且重命名-重命名不是必须的"><a href="#3-解压tar包并且重命名-重命名不是必须的" class="headerlink" title="3.解压tar包并且重命名(重命名不是必须的)"></a>3.解压tar包并且重命名(重命名不是必须的)</h1><blockquote><p>解压命令 tar -zxvf jdk-8u181-linux-x64.tar.gz<br>重命名命令 mv jdk1.8.0_181&#x2F; jdk8</p></blockquote><h1 id="4-添加环境变量"><a href="#4-添加环境变量" class="headerlink" title="4.添加环境变量"></a>4.添加环境变量</h1><ol><li>vim &#x2F;etc&#x2F;profile 打开profile文件</li><li>添加环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">JAVA_HOME=/usr/local/java/jdk8 (注:替换成你的路径 其他不变)<br>JRE_HOME=$JAVA_HOME/jre<br>PATH=$PATH:$JAVA_HOME/bin<br>CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export JAVA_HOME<br>export JRE_HOME<br>export PATH<br>export CLASSPATH<br></code></pre></td></tr></table></figure><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-jdk-2.png" alt="在这里插入图片描述"></p><ol start="3"><li>刷新环境变量  (source &#x2F;etc&#x2F;profile)</li></ol><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5.验证"></a>5.验证</h1><blockquote><p>验证命令 java -version<br>输出版本信息则配置成功</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-jdk-3.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Linux】CentOS Liunx 7 下安装maven</title>
    <link href="/Linux/Centos7InsertMaven/"/>
    <url>/Linux/Centos7InsertMaven/</url>
    
    <content type="html"><![CDATA[<h1 id="0-安装jdk"><a href="#0-安装jdk" class="headerlink" title="0 安装jdk"></a>0 安装jdk</h1><blockquote><p>非本节内容 不在这里说,等我再写一篇博客然后给传送门</p></blockquote><p><a href="https://www.yangxj96.com/Linux/Centos7InsertJdk/">安装jdk</a></p><h1 id="1-下载maven"><a href="#1-下载maven" class="headerlink" title="1.下载maven"></a>1.下载maven</h1><p>传送门: <a href="http://maven.apache.org/download.cgi">maven官方下载地址</a>.</p><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-1.png" alt="在这里插入图片描述"></p><h1 id="2-上传到liunx主机"><a href="#2-上传到liunx主机" class="headerlink" title="2.上传到liunx主机"></a>2.上传到liunx主机</h1><blockquote><p>推荐路径 &#x2F;usr&#x2F;local</p></blockquote><ol><li>利用工具上传到liunx主机的&#x2F;usr&#x2F;local目录下</li></ol><p> <img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-2.png" alt="在这里插入图片描述"></p><ol start="2"><li>解压</li></ol><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-3.png" alt="在这里插入图片描述"></p><blockquote><p>解压命令 tar -zxvf  apache-maven-3.6.3-bin.tar.gz </p></blockquote><blockquote><p>注意: </p></blockquote><blockquote><p>1.tar包包名要和你下载的一样</p></blockquote><blockquote><p>2.要在你存放jar包的目录下执行命令</p></blockquote><ul><li>重命名(可省略,个人习惯)</li></ul><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-4.png" alt="在这里插入图片描述"></p><h1 id="3-修改环境变量"><a href="#3-修改环境变量" class="headerlink" title="3.修改环境变量"></a>3.修改环境变量</h1><p>需要修改的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">MAVEN_HOME=/usr/local/maven (注:这个路径替换成你的解压目录)<br>export MAVEN_HOME<br>export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin<br></code></pre></td></tr></table></figure><ol><li>打开profile文件(vim &#x2F;etc&#x2F;profile)</li><li>在最后添加环境变量<br> <img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-5.png" alt="在这里插入图片描述"></li><li>刷新环境变量,使环境变量生效 (source &#x2F;etc&#x2F;profile)</li></ol><h1 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h1><blockquote><p>mvn -v 如果输出版本信息则配置成功</p></blockquote><p><img src="https://www.yangxj96.com/minio/yangxj96-blog/DevOps/centos7-insert-maven-6.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
