<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打包成Docker镜像后日志输出中文乱码</title>
    <link href="/2024/06/java/b003/"/>
    <url>/2024/06/java/b003/</url>
    
    <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>配置文件中对日志的配置添加如下选项</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">charset</span><span class="token punctuation">:</span>    <span class="token key atrule">file</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注:如果只需要解决控制台乱码,则不需要file这一项</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>idea gradle lombok找不到符号</title>
    <link href="/2023/10/ides/b001/"/>
    <url>/2023/10/ides/b001/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><blockquote><p>IDEA中使用Gradle管理依赖,导入Lombok的时候运行第一次正常运行,有了build文件夹后,再次运行提示找不到符号,网上一般有四种解决办法,如果无法解决在尝试我的方式</p></blockquote><h1 id="1-网上常见的解决办法"><a href="#1-网上常见的解决办法" class="headerlink" title="1 网上常见的解决办法"></a>1 网上常见的解决办法</h1><h2 id="1-1-装上Lombok插件后重启"><a href="#1-1-装上Lombok插件后重启" class="headerlink" title="1.1 装上Lombok插件后重启"></a>1.1 装上Lombok插件后重启</h2><p><img src="/images/blog/ides/b-1-1.png" alt="在这里插入图片描述"></p><blockquote><p>不过现在新版本的IDEA中,Lombok插件已经是内置插件了</p></blockquote><h2 id="1-2-在build-gradle的dependencies中添加如下依赖"><a href="#1-2-在build-gradle的dependencies中添加如下依赖" class="headerlink" title="1.2 在build.gradle的dependencies中添加如下依赖"></a>1.2 在build.gradle的dependencies中添加如下依赖</h2><p><img src="/images/blog/ides/b-1-2.png" alt="在这里插入图片描述"></p><blockquote><p>compileOnly annotationProcessor  testCompileOnly  testAnnotationProcessor 几个关键字呢在新版本的Gradle已经被Implementation代替了.具体如图</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok:1.18.26"</span><span class="token punctuation">)</span><span class="token function">annotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok:1.18.26"</span><span class="token punctuation">)</span><span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok:1.18.26"</span><span class="token punctuation">)</span><span class="token function">testAnnotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok:1.18.26"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>部署到jenkins需要把带annotation的注释掉</p></blockquote><h2 id="1-3-启用注解处理"><a href="#1-3-启用注解处理" class="headerlink" title="1.3 启用注解处理"></a>1.3 启用注解处理</h2><p><img src="/images/blog/ides/b-1-3.png" alt="b-1-1.png"></p><blockquote><p>注意左边红框两个都要选中后勾选启用注解处理</p></blockquote><h2 id="1-4-切换到Intellij-IDEA处理"><a href="#1-4-切换到Intellij-IDEA处理" class="headerlink" title="1.4 切换到Intellij IDEA处理"></a>1.4 切换到Intellij IDEA处理</h2><p><img src="/images/blog/ides/b-1-4.png" alt="在这里插入图片描述"></p><h2 id="1-5-如果以上都不行-则尝试这个方法"><a href="#1-5-如果以上都不行-则尝试这个方法" class="headerlink" title="1.5 如果以上都不行,则尝试这个方法"></a>1.5 如果以上都不行,则尝试这个方法</h2><ol><li>需要检查lombok插件</li><li>勾选启用注解处理</li><li>添加lombok依赖</li><li>恢复gradle中使用此工具构建和运行到默认的Gradle</li><li>在勾选启用注解处理的地方,在勾选上在编译java(-proc:only模式)之前,在单独的步骤中运行处理器(在Default模块和Gradle Imported模块都要勾选)</li></ol><p><img src="/images/blog/ides/b-1-5.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ides</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Winform在VS2022中操作注册表的ClassesRoot项提示权限不足</title>
    <link href="/2023/10/c/b002/"/>
    <url>/2023/10/c/b002/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>在VS2022中的Winform项目中,使用 <code>Registry.ClassesRoot.CreateSubKey</code> 进行注册表相关操作的时候,提示权限不足的错误,但是在vs2022中没有了在属性中直接勾选安全的内容,同时在.NET 6中的Winform项目中,默认没有创建<code>app.manifest</code>文件,所以像我这样的新手会一下子手足无措,无法找到相应的页面进行处理</p><h1 id="1-解决方式"><a href="#1-解决方式" class="headerlink" title="1 解决方式"></a>1 解决方式</h1><blockquote><p>手动创建<code>app.manifest</code>文件</p></blockquote><p>1.1 创建<code>app.manifest</code>文件<br><img src="/images/blog/c/b-1-1.png" alt="在这里插入图片描述"><br><img src="/images/blog/c/b-1-2.png" alt="在这里插入图片描述"></p><blockquote><p>默认名称就是<code>app.manifest</code></p></blockquote><p>1.2 修改权限</p><p>文件的权限注释中已经说明了.<br>把原来的<code>&lt;requestedExecutionLevel level=&quot;asInvoker&quot; uiAccess=&quot;false&quot; /&gt;</code> 替换为<code>&lt;requestedExecutionLevel  level=&quot;requireAdministrator&quot; uiAccess=&quot;false&quot; /&gt;</code>即可.<br>替换后进行编译运行,会提示你以管理员的方式重启VS,重启后既可以正常操作<code>ClassesRoot</code>相关的注册表内容.而且应用也会多一个管理员的标识.如下所示</p><p><img src="/images/blog/c/b-1-3.png" alt="在这里插入图片描述"></p><h3 id="修改后的文件-↓"><a href="#修改后的文件-↓" class="headerlink" title="修改后的文件 ↓"></a>修改后的文件 ↓</h3><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assembly</span> <span class="token attr-name">manifestVersion</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:asm.v1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assemblyIdentity</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0.0.0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyApplication.app<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trustInfo</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:asm.v2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requestedPrivileges</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:asm.v3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- UAC 清单选项             如果想要更改 Windows 用户帐户控制级别，请使用             以下节点之一替换 requestedExecutionLevel 节点。        &lt;requestedExecutionLevel  level="asInvoker" uiAccess="false" />        &lt;requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />        &lt;requestedExecutionLevel  level="highestAvailable" uiAccess="false" />            指定 requestedExecutionLevel 元素将禁用文件和注册表虚拟化。            如果你的应用程序需要此虚拟化来实现向后兼容性，则移除此            元素。        --></span><span class="token comment">&lt;!--&lt;requestedExecutionLevel level="asInvoker" uiAccess="false" />--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requestedExecutionLevel</span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>requireAdministrator<span class="token punctuation">"</span></span> <span class="token attr-name">uiAccess</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requestedPrivileges</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trustInfo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compatibility</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:compatibility.v1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设计此应用程序与其一起工作且已针对此应用程序进行测试的           Windows 版本的列表。取消评论适当的元素，           Windows 将自动选择最兼容的环境。 --></span><span class="token comment">&lt;!-- Windows Vista --></span><span class="token comment">&lt;!--&lt;supportedOS Id="&#123;e2011457-1546-43c5-a5fe-008deee3d3f0&#125;" />--></span><span class="token comment">&lt;!-- Windows 7 --></span><span class="token comment">&lt;!--&lt;supportedOS Id="&#123;35138b9a-5d96-4fbd-8e2d-a2440225f93a&#125;" />--></span><span class="token comment">&lt;!-- Windows 8 --></span><span class="token comment">&lt;!--&lt;supportedOS Id="&#123;4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38&#125;" />--></span><span class="token comment">&lt;!-- Windows 8.1 --></span><span class="token comment">&lt;!--&lt;supportedOS Id="&#123;1f676c76-80e1-4239-95bb-83d0f6d0da78&#125;" />--></span><span class="token comment">&lt;!-- Windows 10 --></span><span class="token comment">&lt;!--&lt;supportedOS Id="&#123;8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a&#125;" />--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compatibility</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指示该应用程序可感知 DPI 且 Windows 在 DPI 较高时将不会对其进行       自动缩放。Windows Presentation Foundation (WPF)应用程序自动感知 DPI，无需       选择加入。选择加入此设置的 Windows 窗体应用程序(面向 .NET Framework 4.6)还应       在其 app.config 中将 "EnableWindowsFormsHighDpiAutoResizing" 设置设置为 "true"。              将应用程序设为感知长路径。请参阅 https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation --></span><span class="token comment">&lt;!--  &lt;application xmlns="urn:schemas-microsoft-com:asm.v3">    &lt;windowsSettings>      &lt;dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true&lt;/dpiAware>      &lt;longPathAware xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">true&lt;/longPathAware>    &lt;/windowsSettings>  &lt;/application>  --></span><span class="token comment">&lt;!-- 启用 Windows 公共控件和对话框的主题(Windows XP 和更高版本) --></span><span class="token comment">&lt;!--  &lt;dependency>    &lt;dependentAssembly>      &lt;assemblyIdentity          type="win32"          name="Microsoft.Windows.Common-Controls"          version="6.0.0.0"          processorArchitecture="*"          publicKeyToken="6595b64144ccf1df"          language="*"        />    &lt;/dependentAssembly>  &lt;/dependency>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>assembly</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C系列语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux中Docker下Minio启动提示权限不足</title>
    <link href="/2023/09/linux/b001/"/>
    <url>/2023/09/linux/b001/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ERROR Unable to initialize backend: mkdir &#x2F;data&#x2F;.minio.sys: permission denied</p></blockquote><h2 id="0-出现的原因"><a href="#0-出现的原因" class="headerlink" title="0 出现的原因:"></a>0 出现的原因:</h2><p>官方说明中,容器内部,minio使用的是1001的一个用户权限进行操作,</p><p>所以映射目录有会有权限不足的情况</p><p>原文如下:</p><p><a href="https://hub.docker.com/r/bitnami/minio">NOTE: As this is a non-root container, the mounted files and directories must have the proper permissions for the UID 1001.</a></p><h2 id="1-解决方案"><a href="#1-解决方案" class="headerlink" title="1 解决方案"></a>1 解决方案</h2><h3 id="1-1-对于启动命令或者docker-compose-yml中的操作"><a href="#1-1-对于启动命令或者docker-compose-yml中的操作" class="headerlink" title="1.1 对于启动命令或者docker-compose.yml中的操作"></a>1.1 对于启动命令或者docker-compose.yml中的操作</h3><h4 id="1-1-1-docker命令直接启动"><a href="#1-1-1-docker命令直接启动" class="headerlink" title="1.1.1 docker命令直接启动"></a>1.1.1 docker命令直接启动</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MINIO_ROOT_USER</span><span class="token operator">=</span>XXX <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MINIO_ROOT_PASSWORD</span><span class="token operator">=</span>XXX <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token string">"9000:9000"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token string">"9001:9001"</span>  <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> <span class="token string">"/data/minio/data:/data"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> <span class="token string">"/data/minio/config:/root/.minio"</span>  <span class="token parameter variable">-name</span> minio <span class="token punctuation">\</span>  bitnami/minio:2023.7.18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="1-1-2-docker-compose-yml"><a href="#1-1-2-docker-compose-yml" class="headerlink" title="1.1.2 docker-compose.yml"></a>1.1.2 docker-compose.yml</h4><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">minio</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> bitnami/minio<span class="token punctuation">:</span>2023.7.18    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> minio    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token comment"># 在docker-compose.yml中需要添加这个命令</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>      <span class="token punctuation">-</span> <span class="token string">"9001:9001"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai      <span class="token punctuation">-</span> MINIO_ROOT_USER=XXX      <span class="token punctuation">-</span> MINIO_ROOT_PASSWORD=XXX    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/data/minio/data:/data"</span>      <span class="token punctuation">-</span> <span class="token string">"/data/minio/config:/root/.minio"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-2-对于映射目录的操作"><a href="#1-2-对于映射目录的操作" class="headerlink" title="1.2 对于映射目录的操作"></a>1.2 对于映射目录的操作</h3><ol><li>把需要的目录都创建好,比如需要映射data和config目录:<ol><li><code>/data/minio/data</code></li><li><code>/data/minio/config </code></li></ol></li><li>包含子文件夹的授权 <code>chown -R 1001:1001 /data/minio</code></li></ol><blockquote><p>注意: 一定要把文件夹都先创建好,不然容器启动后容器创建的用户组和权限都会是root,而不是1001,导致启动失败;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker Nacos PostgreSQL版本</title>
    <link href="/2023/04/ops/b001/"/>
    <url>/2023/04/ops/b001/</url>
    
    <content type="html"><![CDATA[<h1 id="Nacos-V2-2-2版本的PostgreSQL版本"><a href="#Nacos-V2-2-2版本的PostgreSQL版本" class="headerlink" title="Nacos V2.2.2版本的PostgreSQL版本"></a>Nacos V2.2.2版本的PostgreSQL版本</h1><p>因为未指定last版本,所以在pull的时候需要指定版本</p><p>如:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull yangxj96/nacos-server-pgsql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><hr><p><a href="https://hub.docker.com/r/yangxj96/nacos-server-pgsql">Docker仓库连接</a></p><p><a href="https://github.com/yangxj96/nacos-server-pgsql-docker">当前镜像构建脚本仓库链接</a></p><p>具体的变量内容查看原版即可,只是我这边新增了几个变量</p><p>用于适配PostgreSQL数据库</p><p>构建脚本是从<a href="https://github.com/nacos-group/nacos-docker">Nacos Docker</a>克隆后</p><p>在build文件夹下的构建脚本构建的.进行过一些修改</p><hr><h1 id="一-新增的环境变量"><a href="#一-新增的环境变量" class="headerlink" title="一 新增的环境变量"></a>一 新增的环境变量</h1><table><thead><tr><th align="left">变量名</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">PGSQL_URL</td><td align="left">JDBC URL</td><td align="left">jdbc:postgresql:&#x2F;&#x2F;localhost:5432&#x2F;db?currentSchema&#x3D;schema</td></tr><tr><td align="left">PGSQL_USERNAME</td><td align="left">数据库用户名</td><td align="left">postgres</td></tr><tr><td align="left">PGSQL_PASSWORD</td><td align="left">数据库密码</td><td align="left">postgres</td></tr></tbody></table><h1 id="二-docker-compose运行示例"><a href="#二-docker-compose运行示例" class="headerlink" title="二 docker-compose运行示例"></a>二 docker-compose运行示例</h1><h3 id="docker-compose-文件"><a href="#docker-compose-文件" class="headerlink" title="docker-compose 文件"></a>docker-compose 文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> yangxj96/nacos<span class="token punctuation">-</span>service<span class="token punctuation">-</span>pgsql<span class="token punctuation">:</span>v2.2.2<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>pgsql    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/Nacos/env/pgsql.env"</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/Nacos/logs/:/home/nacos/logs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="pgsql-env"><a href="#pgsql-env" class="headerlink" title="pgsql.env"></a>pgsql.env</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">PREFER_HOST_MODE=ipSPRING_DATASOURCE_PLATFORM=postgresqlPGSQL_URL=jdbc<span class="token punctuation">:</span>postgresql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>5432/db<span class="token punctuation">?</span>currentSchema=schemaPGSQL_USERNAME=postgresPGSQL_PASSWORD=postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="三-更新日志"><a href="#三-更新日志" class="headerlink" title="三 更新日志"></a>三 更新日志</h1><h2 id="v2-2-2"><a href="#v2-2-2" class="headerlink" title="v2.2.2"></a>v2.2.2</h2><blockquote><p>初始版本</p></blockquote><h2 id="v2-2-2-1"><a href="#v2-2-2-1" class="headerlink" title="v2.2.2-1"></a>v2.2.2-1</h2><ul><li>修复docker 23.0.3 版本下无法运行</li><li>添加 <code>NACOS_AUTH_TOKEN,NACOS_AUTH_IDENTITY_KEY,NACOS_AUTH_IDENTITY_VALUE</code>的默认值(和官方默认值一样)</li></ul><h2 id="v2-2-2-2"><a href="#v2-2-2-2" class="headerlink" title="v2.2.2-2"></a>v2.2.2-2</h2><blockquote><p>之前下载后使用大概1.1GB左右,本次更新主要为缩小镜像大小</p></blockquote><ul><li>切换基础镜像到<code>amazoncorretto:8u362-alpine3.17-jre</code>,大小只有150M左右</li><li>优化一些操作,缩小包内容</li><li>整体镜像缩减到278.7MB</li></ul><h4 id="以上均为自己理解的内容-也许会是误打误撞搞出来的-如有哪里不正确-请见谅"><a href="#以上均为自己理解的内容-也许会是误打误撞搞出来的-如有哪里不正确-请见谅" class="headerlink" title="以上均为自己理解的内容,也许会是误打误撞搞出来的. 如有哪里不正确,请见谅"></a>以上均为自己理解的内容,也许会是误打误撞搞出来的. 如有哪里不正确,请见谅</h4>]]></content>
    
    
    <categories>
      
      <category>OPS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git提交代码时使用GPG</title>
    <link href="/2023/03/ides/b002/"/>
    <url>/2023/03/ides/b002/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>下载安装GPG的过程省略,直接开始进行配置</p><h2 id="0-visual-studio-版本说明"><a href="#0-visual-studio-版本说明" class="headerlink" title="0.visual studio 版本说明"></a>0.visual studio 版本说明</h2><blockquote><p>其余版本未测试,但是应该也是可以的</p></blockquote><p><img src="/images/blog/ides/b-2-1.png" alt="在这里插入图片描述"></p><h2 id="1-获取GPG的密钥ID"><a href="#1-获取GPG的密钥ID" class="headerlink" title="1 获取GPG的密钥ID"></a>1 获取GPG的密钥ID</h2><h3 id="1-1-window下可以打开Kleopatra查看生成好的密钥的密钥ID"><a href="#1-1-window下可以打开Kleopatra查看生成好的密钥的密钥ID" class="headerlink" title="1.1 window下可以打开Kleopatra查看生成好的密钥的密钥ID"></a>1.1 window下可以打开Kleopatra查看生成好的密钥的密钥ID</h3><p><img src="/images/blog/ides/b-2-2.png" alt="在这里插入图片描述"></p><h3 id="1-2-也可以从命令行中获取"><a href="#1-2-也可以从命令行中获取" class="headerlink" title="1.2 也可以从命令行中获取"></a>1.2 也可以从命令行中获取</h3><blockquote><p> gpg –list-keys</p></blockquote><p><img src="/images/blog/ides/b-2-3.png" alt="在这里插入图片描述"><br>红框位置,后16位就是密钥ID</p><h2 id="2-配置-gitconfig"><a href="#2-配置-gitconfig" class="headerlink" title="2 配置.gitconfig"></a>2 配置.gitconfig</h2><blockquote><p>文件位置,window下在:C:\Users\你的用户名\.gitconfig</p></blockquote><p><img src="/images/blog/ides/b-2-4.png" alt="在这里插入图片描述"><br>红框位置要进行配置,email的邮箱地址要和生成密钥的时候添加的GPG的邮箱一致</p>]]></content>
    
    
    <categories>
      
      <category>ides</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Clion配置QT相关外部工具</title>
    <link href="/2023/01/ides/b003/"/>
    <url>/2023/01/ides/b003/</url>
    
    <content type="html"><![CDATA[<h1 id="Clion开发QT时-配置外部工具"><a href="#Clion开发QT时-配置外部工具" class="headerlink" title="Clion开发QT时,配置外部工具"></a>Clion开发QT时,配置外部工具</h1><h2 id="一、QT设计师-Qt-Designer"><a href="#一、QT设计师-Qt-Designer" class="headerlink" title="一、QT设计师(Qt Designer)"></a>一、QT设计师(Qt Designer)</h2><h5 id="网上多数办法"><a href="#网上多数办法" class="headerlink" title="网上多数办法"></a>网上多数办法</h5><p><img src="/images/blog/ides/b-3-1.png" alt="在这里插入图片描述"></p><blockquote><p>此方法有个问题,如果是多级目录,有一定问题出现找不到UI文件,解决办法如下</p></blockquote><p><img src="/images/blog/ides/b-3-2.png" alt="在这里插入图片描述"></p><blockquote><p>其中实参选择$FilePath$,工作目录选择$ProjectFileDir$,亲测有效</p></blockquote><h2 id="二、Qt-UIC"><a href="#二、Qt-UIC" class="headerlink" title="二、Qt UIC"></a>二、Qt UIC</h2><p><img src="/images/blog/ides/b-3-3.png" alt="在这里插入图片描述"></p><h2 id="三、Qt-RCC"><a href="#三、Qt-RCC" class="headerlink" title="三、Qt RCC"></a>三、Qt RCC</h2><p><img src="/images/blog/ides/b-3-4.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ides</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Could not find compile target android-33</title>
    <link href="/2022/12/android/b001/"/>
    <url>/2022/12/android/b001/</url>
    
    <content type="html"><![CDATA[<p>不废话,除网上所说修改compileSdk&#x2F;targetSdk进行降级外,<br>还有一种可能,就是android sdk损坏,需要删除损坏的目录重新下载,<br>我直接暴力删除了整个sdk的目录,进行了重新下载后成功解决,<br>如有大佬找到了具体需要只删除那个目录的请留言</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 源码安装MySQl 5.6.14 (可用弱口令)</title>
    <link href="/2022/12/linux/b007/"/>
    <url>/2022/12/linux/b007/</url>
    
    <content type="html"><![CDATA[<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备:"></a>1 环境准备:</h1><h2 id="1-1-打开终端-使用命令查询是否有mysql相关的依赖-组件等"><a href="#1-1-打开终端-使用命令查询是否有mysql相关的依赖-组件等" class="headerlink" title="1.1 打开终端 使用命令查询是否有mysql相关的依赖,组件等."></a>1.1 打开终端 使用命令查询是否有mysql相关的依赖,组件等.</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>因为写博客的时候已经安装好了,所以没有图片</p></blockquote><h2 id="1-2-如果有则使用命令卸载"><a href="#1-2-如果有则使用命令卸载" class="headerlink" title="1.2 如果有则使用命令卸载"></a>1.2 如果有则使用命令卸载</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> *** // 普通删除<span class="token function">rpm</span> <span class="token parameter variable">-e</span> *** // 强力删除模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><blockquote><p>注:***为依赖名称</p></blockquote><h1 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2 开始安装"></a>2 开始安装</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><h3 id="2-1-1-下载安装包-并且复制到-opt目录下-不知道放到其他目录下是否可以"><a href="#2-1-1-下载安装包-并且复制到-opt目录下-不知道放到其他目录下是否可以" class="headerlink" title="2.1.1 下载安装包,并且复制到&#x2F;opt目录下(不知道放到其他目录下是否可以)"></a>2.1.1 下载安装包,并且复制到&#x2F;opt目录下(不知道放到其他目录下是否可以)</h3><p>   <a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.22.tar.gz/from/http://cdn.mysql.com/">5.6.22版本</a><br>   <a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.14.tar.gz/from/http://cdn.mysql.com/">5.6.14版本</a></p><h3 id="2-1-2-安装make-gcc-g-emake"><a href="#2-1-2-安装make-gcc-g-emake" class="headerlink" title="2.1.2 安装make gcc-g++ emake"></a>2.1.2 安装make gcc-g++ emake</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">make</span> gcc-g++ cmake bison-devel ncurses-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注:此处安装时间可能较长,半小时左右</p></blockquote><h2 id="2-2-解压下载好的源码包并进入解压目录"><a href="#2-2-解压下载好的源码包并进入解压目录" class="headerlink" title="2.2 解压下载好的源码包并进入解压目录"></a>2.2 解压下载好的源码包并进入解压目录</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">tar -zxvf 文件名cd 解压好的目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-3-编译"><a href="#2-3-编译" class="headerlink" title="2.3 编译"></a>2.3 编译</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">-DCMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local/mysql <span class="token parameter variable">-DMYSQL_UNIX_ADDR</span><span class="token operator">=</span>/usr/local/mysql/mysql.sock <span class="token parameter variable">-DDEFAULT_CHARSET</span><span class="token operator">=</span>utf8 <span class="token parameter variable">-DDEFAULT_COLLATION</span><span class="token operator">=</span>utf8_general_ci <span class="token parameter variable">-DWITH_INNOBASE_STORAGE_ENGINE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-DWITH_ARCHIVE_STORAGE_ENGINE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-DWITH_BLACKHOLE_STORAGE_ENGINE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-DMYSQL_DATADIR</span><span class="token operator">=</span>/usr/local/mysql/data <span class="token parameter variable">-DMYSQL_TCP_PORT</span><span class="token operator">=</span><span class="token number">3306</span> <span class="token parameter variable">-DMYSQL_USER</span><span class="token operator">=</span>mysql <span class="token parameter variable">-DENABLE_DOWNLOADS</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">注:这里为一句命令 不是多句/user/local是安装目录，亲测放到别的目录也行错误解决:scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysqldb 错误原因:缺少文件 解决方法: yum install 'perl(Data::Dumper)'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="2-4-编译并且安装"><a href="#2-4-编译并且安装" class="headerlink" title="2.4 编译并且安装"></a>2.4 编译并且安装</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>注:耗时大致半小时到40分钟, 编译过程中出现警告和红色的语句不是错误,无需理会</p></blockquote><h1 id="3-配置mysql组和用户"><a href="#3-配置mysql组和用户" class="headerlink" title="3 配置mysql组和用户"></a>3 配置mysql组和用户</h1><p>创建mysql 用户和mysql 用户组 并且修改文件夹权限 (如果有则直接修改文件夹权限就好了)</p><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&#x2F;&#x2F; 查看用户列表cat &#x2F;etc&#x2F;passwd&#x2F;&#x2F; 查看用户组列表cat &#x2F;etc&#x2F;group&#x2F;&#x2F; 创建用户组groupadd mysql&#x2F;&#x2F; 创建用户并且放到mysql组useradd -g mysql mysql&#x2F;&#x2F; 由于安装的时候是安装到了&#x2F;usr&#x2F;local&#x2F;mysql文件夹. &#x2F;&#x2F; 所以要把这个文件夹的所属修改成刚刚创建的mysql组和mysql用户chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4-初始化mysql"><a href="#4-初始化mysql" class="headerlink" title="4 初始化mysql"></a>4 初始化mysql</h1><h2 id="4-1-进入mysql的安装文件夹"><a href="#4-1-进入mysql的安装文件夹" class="headerlink" title="4.1 进入mysql的安装文件夹"></a>4.1 进入mysql的安装文件夹</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="4-2-初始化系统自带的数据库和表"><a href="#4-2-初始化系统自带的数据库和表" class="headerlink" title="4.2 初始化系统自带的数据库和表"></a>4.2 初始化系统自带的数据库和表</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scripts/mysql_install_db <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/mysql <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/usr/local/mysql/data <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="4-3-修改配置文件"><a href="#4-3-修改配置文件" class="headerlink" title="4.3 修改配置文件."></a>4.3 修改配置文件.</h2><p>   有的系统安装时候会在&#x2F;etc文件夹下创建my.cnf文件,由于mysql数据库读取配置优先级是先到&#x2F;etc文件夹下寻找my.cnf文件,如果没有,才会到我们mysql安装目录下寻找my.cnf 所以需要修改&#x2F;etc文件夹下的my.cng文件(防止干扰),让他读取安装目录下的my.cnf文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/my.cnf /etc/my.cnf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="4-4-配置开机启动"><a href="#4-4-配置开机启动" class="headerlink" title="4.4 配置开机启动"></a>4.4 配置开机启动</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、拷贝脚本</span><span class="token function">cp</span> support-files/mysql.server /etc/init.d/mysql<span class="token comment"># 2、添加服务mysql</span><span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> mysql<span class="token comment"># 3、设置mysql服务为自启动</span><span class="token function">chkconfig</span> mysql on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-5-启动mysql-并且进入数据库-修改密码"><a href="#4-5-启动mysql-并且进入数据库-修改密码" class="headerlink" title="4.5 启动mysql 并且进入数据库 ,修改密码"></a>4.5 启动mysql 并且进入数据库 ,修改密码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、启动mysql</span><span class="token function">service</span> mysql start<span class="token comment"># 2、进入/usr/local/mysql/bin文件夹</span><span class="token builtin class-name">cd</span> /usr/local/mysql/bin<span class="token comment"># 3、进入数据库(出世密码为空)</span>./mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> 或 ./mysql <span class="token parameter variable">-u</span> root<span class="token comment"># 4、修改数据库密码</span>SET PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'你的密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-6-配置环境变量-使其能直接使用mysql-的命令-而不需要进入mysql的bin目录下才能使用"><a href="#4-6-配置环境变量-使其能直接使用mysql-的命令-而不需要进入mysql的bin目录下才能使用" class="headerlink" title="4.6 配置环境变量 使其能直接使用mysql 的命令 而不需要进入mysql的bin目录下才能使用"></a>4.6 配置环境变量 使其能直接使用mysql 的命令 而不需要进入mysql的bin目录下才能使用</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1 进入profile文件</span><span class="token function">vim</span> /etc/profile<span class="token comment"># 2 进入最后一行, 添加配置</span><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/mysql/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 3 刷新配置文件</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/images/blog/linux/b-6-1.png" alt="这里写图片描述"></p><h2 id="4-7-愉快的使用吧"><a href="#4-7-愉快的使用吧" class="headerlink" title="4.7 愉快的使用吧"></a>4.7 愉快的使用吧</h2><p><img src="/images/blog/linux/b-6-2.png" alt="这里写图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 使用rdesktop远程连接阿里云服务器出现Failed to connect, CredSSP required by server.</title>
    <link href="/2022/12/linux/b008/"/>
    <url>/2022/12/linux/b008/</url>
    
    <content type="html"><![CDATA[<h2 id="解决Liunx连接Window-服务器时出现Failed-to-connect-CredSSP-required-by-server"><a href="#解决Liunx连接Window-服务器时出现Failed-to-connect-CredSSP-required-by-server" class="headerlink" title="解决Liunx连接Window 服务器时出现Failed to connect, CredSSP required by server."></a>解决Liunx连接Window 服务器时出现Failed to connect, CredSSP required by server.</h2><p>1.在网页端远程连接服务器。<br>2.右键我的电脑-&gt;属性-&gt;远程设置-&gt;远程<br>3.<strong>取消勾选 仅允许运行使用网络界别身份验证的远程桌面的计算机连接(建议)(N)</strong></p><blockquote><p>具体原因还不清楚，不过这样操作后成功连接上阿里云服务器。<br>注：阿里云服务器系统镜像为：Windows Server 2012 D2 Datacenter</p></blockquote><p><img src="/images/blog/linux/b-7-1.png" alt="修改后的图片"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 安装Xchm</title>
    <link href="/2022/12/linux/b006/"/>
    <url>/2022/12/linux/b006/</url>
    
    <content type="html"><![CDATA[<h2 id="切换到阿里云的源"><a href="#切换到阿里云的源" class="headerlink" title="切换到阿里云的源"></a>切换到阿里云的源</h2><a href="/2022/12/linux/b005/" title="CentOS Liunx 7 更换为阿里云的源">CentOS Liunx 7 更换为阿里云的源</a><h2 id="切换为root用户"><a href="#切换为root用户" class="headerlink" title="切换为root用户"></a>切换为root用户</h2><h2 id="yum命令安装"><a href="#yum命令安装" class="headerlink" title="yum命令安装"></a>yum命令安装</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> xchm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="结果如下图"><a href="#结果如下图" class="headerlink" title="结果如下图:"></a>结果如下图:</h4><p><img src="/images/blog/linux/b-4-1.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 更换为阿里云的源</title>
    <link href="/2022/12/linux/b005/"/>
    <url>/2022/12/linux/b005/</url>
    
    <content type="html"><![CDATA[<h2 id="1-备份"><a href="#1-备份" class="headerlink" title="1 备份"></a>1 备份</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="2-下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#2-下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="2 下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F;"></a>2 下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F;</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="3-生成缓存"><a href="#3-生成缓存" class="headerlink" title="3 生成缓存"></a>3 生成缓存</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="结果查询如下图"><a href="#结果查询如下图" class="headerlink" title="结果查询如下图:"></a>结果查询如下图:</h4><p><img src="/images/blog/linux/b-5-1.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli 3.x中@路径提示Module is not installed</title>
    <link href="/2022/12/FE/b001/"/>
    <url>/2022/12/FE/b001/</url>
    
    <content type="html"><![CDATA[<h1 id="错误显示"><a href="#错误显示" class="headerlink" title="错误显示"></a>错误显示</h1><p>IDEA中Vue项目引入的路径@路径格式中提示Module is not  installed<br><img src="/images/blog/vue/b-1-1.png" alt="错误提示"></p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><ul><li>vue3中没有了 webpack.config.js 文件</li><li>IDEA找不到这个文件了,所以提示这个信息</li></ul><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><ul><li>双击shift键,打开全局搜索,输入webpack<br><img src="/images/blog/vue/b-1-2.png" alt="全局搜索"></li><li>选择红框中的webpack</li><li>点击选择路径<br><img src="/images/blog/vue/b-1-3.png" alt="选择路径"></li><li>选择路径<br><img src="/images/blog/vue/b-1-4.png" alt="选择路径"></li><li>路径为项目中的 node_modules -&gt; @vue -&gt; cli-service -&gt;  webpack.config.js 文件.</li><li>点击确定后IDEA 会提示<img src="/images/blog/vue/b-1-5.png" alt="IDEA 提示"></li></ul><blockquote><p>如果未生效,则重启下IDEA,即可解决问题.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>FE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 防火墙 和 selinux 常用操作</title>
    <link href="/2022/12/linux/b009/"/>
    <url>/2022/12/linux/b009/</url>
    
    <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><blockquote><p>CentOS 7.0默认使用的是firewall作为防火墙</p></blockquote><p>查看防火墙状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>停止firewall</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>启用firewall开机启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> firewalld.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>禁止firewall开机启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable firewalld.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h2><blockquote><p>这个可能不是很熟悉</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li><p>SELinux全称为Security-Enhanced Linux，是一种访问控制体系，在这种访问控制体系的限制下，进程只能访问那些在他的任务中所需要文件。</p></li><li><p>SELinux是由美国国家安全局NSA对于强制访问控制的实现，是 Linux上最杰出的新安全子系统。SELinux可以最大限度地保证Linux系统的安全。</p></li><li><p><a href="https://blog.csdn.net/chszs/article/details/3664489">详细介绍地址</a></p></li></ol><h3 id="关闭方式"><a href="#关闭方式" class="headerlink" title="关闭方式"></a>关闭方式</h3><ol><li>打开selinux的配置文件<figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li>将SELINUX&#x3D;enforcing改为SELINUX&#x3D;disabled</li></ol><p><img src="/images/blog/linux/b-8-1.png" alt="关闭selinux"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 下安装maven</title>
    <link href="/2022/12/linux/b002/"/>
    <url>/2022/12/linux/b002/</url>
    
    <content type="html"><![CDATA[<h2 id="Liunx-安装maven"><a href="#Liunx-安装maven" class="headerlink" title="Liunx 安装maven"></a>Liunx 安装maven</h2><h3 id="0-安装java-jdk"><a href="#0-安装java-jdk" class="headerlink" title="0 安装java jdk"></a>0 安装java jdk</h3><blockquote><p>非本节内容 不在这里说,等我再写一篇博客然后给传送门</p></blockquote><h3 id="1-下载maven"><a href="#1-下载maven" class="headerlink" title="1.下载maven"></a>1.下载maven</h3><p>传送门: <a href="http://maven.apache.org/download.cgi">maven官方下载地址</a>.</p><p><img src="/images/blog/linux/b-1-1.png" alt="在这里插入图片描述"></p><h3 id="2-上传到liunx主机"><a href="#2-上传到liunx主机" class="headerlink" title="2.上传到liunx主机"></a>2.上传到liunx主机</h3><blockquote><p>推荐路径 &#x2F;usr&#x2F;local</p></blockquote><ol><li>利用工具上传到liunx主机的&#x2F;usr&#x2F;local目录下</li></ol><p><img src="/images/blog/linux/b-1-2.png" alt="在这里插入图片描述"></p><ol start="2"><li>解压</li></ol><p><img src="/images/blog/linux/b-1-3.png" alt="在这里插入图片描述"></p><blockquote><p>解压命令 tar -zxvf  apache-maven-3.6.3-bin.tar.gz<br>注意:<br>1.tar包包名要和你下载的一样<br>2.要在你存放jar包的目录下执行命令</p></blockquote><ul><li>重命名(可省略,个人习惯)</li></ul><p><img src="/images/blog/linux/b-1-4.png" alt="在这里插入图片描述"></p><h3 id="3-修改环境变量"><a href="#3-修改环境变量" class="headerlink" title="3.修改环境变量"></a>3.修改环境变量</h3><p>需要修改的内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/usr/local/maven <span class="token punctuation">(</span>注:这个路径替换成你的解压目录<span class="token punctuation">)</span><span class="token builtin class-name">export</span> MAVEN_HOME<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;MAVEN_HOME&#125;</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ol><li>打开profile文件(vim &#x2F;etc&#x2F;profile)</li><li>在最后添加环境变量<br><img src="/images/blog/linux/b-1-5.png" alt="在这里插入图片描述"></li><li>刷新环境变量,使环境变量生效 (source &#x2F;etc&#x2F;profile)</li></ol><h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h3><blockquote><p>mvn -v 如果输出版本信息则配置成功</p></blockquote><p><img src="/images/blog/linux/b-1-6.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker docker-compose cp cannot create regular file ‘xxxxx‘ Permission denied</title>
    <link href="/2022/12/ops/b002/"/>
    <url>/2022/12/ops/b002/</url>
    
    <content type="html"><![CDATA[<h3 id="1-问题原因"><a href="#1-问题原因" class="headerlink" title="1.问题原因"></a>1.问题原因</h3><blockquote><p>需要创建和本机的映射路径,导致权限不足</p></blockquote><p><img src="/images/blog/ops/b-1-1.png" alt="在这里插入图片描述"></p><h3 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h3><blockquote><p>编辑docker-compose文件 添加 privileged: true<br> 重新运行 docker-compose up -d 即可</p></blockquote><p><img src="/images/blog/ops/b-1-2.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>OPS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liunx 7 下安装java jdk</title>
    <link href="/2022/12/linux/b003/"/>
    <url>/2022/12/linux/b003/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1.下载jdk"></a>1.下载jdk</h3><p>下载传送门:<a href="https://download.csdn.net/download/weightman2008/10553450">jdk8</a></p><blockquote><p>不是我的资源,如果觉得太贵可以在别的地方找<br>本来我想上传一个liunx和windows两个放一起,不过超过了csdn上传文件的大小限制,单独上传liunx发现已经有资源了.</p></blockquote><h3 id="2-上传到liunx主机"><a href="#2-上传到liunx主机" class="headerlink" title="2.上传到liunx主机"></a>2.上传到liunx主机</h3><blockquote><p>推荐路径 &#x2F;usr&#x2F;local&#x2F;java<br>因为可能安装好几个版本的jdk 所以新建了个java目录</p></blockquote><p><img src="/images/blog/linux/b-2-1.png" alt="在这里插入图片描述"></p><h3 id="3-解压tar包并且重命名-重命名不是必须的"><a href="#3-解压tar包并且重命名-重命名不是必须的" class="headerlink" title="3.解压tar包并且重命名(重命名不是必须的)"></a>3.解压tar包并且重命名(重命名不是必须的)</h3><blockquote><p>解压命令 tar -zxvf jdk-8u181-linux-x64.tar.gz<br>重命名命令  mv jdk1.8.0_181&#x2F; jdk8</p></blockquote><h3 id="4-添加环境变量"><a href="#4-添加环境变量" class="headerlink" title="4.添加环境变量"></a>4.添加环境变量</h3><ol><li>vim &#x2F;etc&#x2F;profile 打开profile文件</li><li>添加环境变量</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk8 <span class="token punctuation">(</span>注:替换成你的路径 其他不变<span class="token punctuation">)</span><span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token builtin class-name">export</span> JAVA_HOME<span class="token builtin class-name">export</span> JRE_HOME<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span><span class="token builtin class-name">export</span> CLASSPATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/images/blog/linux/b-2-2.png" alt="在这里插入图片描述"><br>3. 刷新环境变量  (source &#x2F;etc&#x2F;profile)</p><h3 id="5-验证"><a href="#5-验证" class="headerlink" title="5.验证"></a>5.验证</h3><blockquote><p>验证命令 java -version<br>输出版本信息则配置成功</p></blockquote><p><img src="/images/blog/linux/b-2-3.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Liu nx 7 下安装docker-compose</title>
    <link href="/2022/12/linux/b004/"/>
    <url>/2022/12/linux/b004/</url>
    
    <content type="html"><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><ul><li>国内下载偶尔会抽风 下载特别慢</li></ul><h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2.解决"></a>2.解决</h3><ul><li>下载文章的资源 &#x2F; <a href="https://download.csdn.net/download/qq_37274323/12207453">传送门</a></li><li>解压获取到两个版本 选择liunx版本</li><li>通过Xftp或者其他方式上传到 &#x2F;usr&#x2F;local&#x2F;bin 路径<br><img src="/images/blog/linux/b-3-1.png" alt="在这里插入图片描述"></li><li>通过Xshell 重命名文件命</li></ul> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /usr/local/bin/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>添加可执行权限</li></ul> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>查看版本</li></ul> <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="/images/blog/linux/b-3-2.png" alt="在这里插入图片描述"></p><ul><li>输出版本信息则为正常安装</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Object转换List&lt;Map&lt;String,Object&gt;&gt;</title>
    <link href="/2022/12/java/b001/"/>
    <url>/2022/12/java/b001/</url>
    
    <content type="html"><![CDATA[<h1 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1 使用场景"></a>1 使用场景</h1><p>使用的时候IDEA会提示警告 说未检查类型.</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Obj</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2 解决办法"></a>2 解决办法</h1><ol><li>使用@SuperWarning({“unchecked”})进行压制</li><li>写个工具类进行转换</li></ol><h2 id="2-1-方法1-压制警告"><a href="#2-1-方法1-压制警告" class="headerlink" title="2.1 方法1,压制警告"></a>2.1 方法1,压制警告</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuperWarning</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Obj</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-2-方法2-手动转换"><a href="#2-2-方法2-手动转换" class="headerlink" title="2.2 方法2,手动转换"></a>2.2 方法2,手动转换</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">castListMap</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> kCalzz<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> vCalzz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> mapObj <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mapObj <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> mapObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>kCalzz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vCalzz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p> 个人不喜欢使用注解消除警告,因为觉得这个消除了,但是仍然存在隐患. 所以选择使用静态方法进行转换. 结果可控.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RestTemplate中postForEntity其中参数为数组或者List</title>
    <link href="/2022/12/java/b002/"/>
    <url>/2022/12/java/b002/</url>
    
    <content type="html"><![CDATA[<h1 id="一-使用场景"><a href="#一-使用场景" class="headerlink" title="一.使用场景"></a>一.使用场景</h1><blockquote><p>RestTemplate.postForEntity() 方法中的参数有数组或者List<br>因为是对接其他人的接口,不知道服务端是怎么写的, 也不知道是说明语言写的<br>所以其他办法不对,可以尝试下这个方法</p></blockquote><h1 id="二-解决办法"><a href="#二-解决办法" class="headerlink" title="二.解决办法"></a>二.解决办法</h1><h3 id="2-1-spring-boot-版本"><a href="#2-1-spring-boot-版本" class="headerlink" title="2.1 spring boot 版本"></a>2.1 spring boot 版本</h3><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-RestTemplate-创建Bean"><a href="#2-2-RestTemplate-创建Bean" class="headerlink" title="2.2 RestTemplate 创建Bean"></a>2.2 RestTemplate 创建Bean</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">additionalMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-3-参数入参时-重点"><a href="#2-3-参数入参时-重点" class="headerlink" title="2.3 参数入参时(重点)"></a>2.3 参数入参时(重点)</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token string">"username[]"</span><span class="token punctuation">,</span> usernames<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>重点说明:<br>  1.需要使用addAll添加参数<br>  2.key需要在key的值后加[]<br>  3.value需要为list类型</p></blockquote><h1 id="三-完整示例"><a href="#三-完整示例" class="headerlink" title="三.完整示例"></a>三.完整示例</h1><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">JSONArray</span> <span class="token function">accountDetails</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> usernames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token comment">// @formatter:off</span><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"access_token"</span>  <span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token string">"username[]"</span> <span class="token punctuation">,</span> usernames<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// @formatter:on</span><span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> restTemplateUtils<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询响应:&#123;&#125;"</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"ret"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> json<span class="token punctuation">.</span>getJSONObject<span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 封装的post通用部分 * * @param url    请求路径 * @param params 参数 * @param clazz  响应类型 * @return 请求成功返回body, 请求失败抛出异常 */</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiValueMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> request<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResponseStatusException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"请求出错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8 stream流操作</title>
    <link href="/2022/12/java/b004/"/>
    <url>/2022/12/java/b004/</url>
    
    <content type="html"><![CDATA[<h1 id="一-List-相关"><a href="#一-List-相关" class="headerlink" title="一 List 相关"></a>一 List 相关</h1><h2 id="1-1-List-获取元素对象中某个属性的的集合"><a href="#1-1-List-获取元素对象中某个属性的的集合" class="headerlink" title="1.1 List 获取元素对象中某个属性的的集合"></a>1.1 List 获取元素对象中某个属性的的集合</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// List&lt;Object></span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> userIds <span class="token operator">=</span> users                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-2-List-获取元素符合条件的元素"><a href="#1-2-List-获取元素符合条件的元素" class="headerlink" title="1.2 List 获取元素符合条件的元素"></a>1.2 List 获取元素符合条件的元素</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span>users <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Clion CMake C/C++程序输出乱码</title>
    <link href="/2022/12/c/b001/"/>
    <url>/2022/12/c/b001/</url>
    
    <content type="html"><![CDATA[<h1 id="一-使用场景"><a href="#一-使用场景" class="headerlink" title="一.使用场景"></a>一.使用场景</h1><blockquote><p>Clion使用CMake进行项目管理<br>在使用中,无论使用TEXT()包裹中文或者是_T()包裹,都会乱码</p></blockquote><h1 id="二-解决办法"><a href="#二-解决办法" class="headerlink" title="二.解决办法"></a>二.解决办法</h1><blockquote><p>搜索得到最靠谱的解决办法:<br>在CMakeLists.txt文件中添加一个设置项</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># C的解决办法</span>set<span class="token punctuation">(</span>CMAKE_C_FLAGS <span class="token string">"<span class="token variable">$&#123;CMAKE_C_FLAGS&#125;</span> -Wall -fexec-charset=GBK"</span><span class="token punctuation">)</span><span class="token comment"># C++ 的解决办法</span>set<span class="token punctuation">(</span>CMAKE_CXX_FLAGS <span class="token string">"<span class="token variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -Wall -fexec-charset=GBK"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://segmentfault.com/a/1190000039128339">原答案传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>C系列语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>addResourceHandlers(ResourceHandlerRegistry registry)中文无法访问</title>
    <link href="/2022/12/java/b006/"/>
    <url>/2022/12/java/b006/</url>
    
    <content type="html"><![CDATA[<h1 id="一-问题复现"><a href="#一-问题复现" class="headerlink" title="一 问题复现"></a>一 问题复现</h1><p>使用springboot配置映射静态资源目录后,英文和数字可以正常进行访问,但是中文就提示404</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/file/video/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getVideoFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="二-解决办法"><a href="#二-解决办法" class="headerlink" title="二 解决办法"></a>二 解决办法</h1><p>原文<a href="https://blog.csdn.net/ngl272/article/details/122458262">传送门</a>,有分析过程</p><h2 id="一-UrlPathHelper-设置不decodeurl"><a href="#一-UrlPathHelper-设置不decodeurl" class="headerlink" title="一 UrlPathHelper 设置不decodeurl"></a>一 UrlPathHelper 设置不decodeurl</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UrlPathHelper</span> urlPathHelper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urlPathHelper<span class="token punctuation">.</span><span class="token function">setUrlDecode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urlPathHelper<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/files/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"file:E:/FileUpload/HmiInterface/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="二-使用原来的AntPathMatcher-（推荐）"><a href="#二-使用原来的AntPathMatcher-（推荐）" class="headerlink" title="二 使用原来的AntPathMatcher （推荐）"></a>二 使用原来的AntPathMatcher （推荐）</h2><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>版本问题,最为致命</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用CMake打包后的QT程序打开出现黑窗口</title>
    <link href="/2022/12/c/b003/"/>
    <url>/2022/12/c/b003/</url>
    
    <content type="html"><![CDATA[<h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p><img src="/images/blog/c/b-2-1.png" alt="问题图片"></p><blockquote><p>打包后使用windeployqt添加依赖之后,打开应用就会出现这样的一个黑窗口</p></blockquote><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>在CMakeLists.txt文件的add_executable()中加上WIN32</p><p><img src="/images/blog/c/b-2-2.png" alt="解决方式"></p><blockquote><p>重新打包后替换掉exe即可解决问题</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="https://blog.csdn.net/xiaoke0O/article/details/106532988">参考链接</a></h1>]]></content>
    
    
    <categories>
      
      <category>C系列语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>添加Converter解析器中使用lambda表达式代替匿名内部类是启动报错does the class parameterize those types?</title>
    <link href="/2022/12/java/b005/"/>
    <url>/2022/12/java/b005/</url>
    
    <content type="html"><![CDATA[<h1 id="一、场景复现"><a href="#一、场景复现" class="headerlink" title="一、场景复现"></a>一、场景复现</h1><h2 id="1、相关代码"><a href="#1、相关代码" class="headerlink" title="1、相关代码"></a>1、相关代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">></span></span> <span class="token function">localDateTimeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> source <span class="token operator">-></span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">LOCAL_DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="2、报错信息"><a href="#2、报错信息" class="headerlink" title="2、报错信息"></a>2、报错信息</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Caused by: java.lang.IllegalArgumentException: Unable to determine source type &lt;S&gt; and target type &lt;T&gt; for your Converter [com.example.demo126.config.MappingConverterAdapter$$Lambda$522&#x2F;817994751];does the class parameterize those types?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h1><h2 id="1-web项目启动注册requestMappingHandlerAdapter的时候会初始化WebBindingInitializer"><a href="#1-web项目启动注册requestMappingHandlerAdapter的时候会初始化WebBindingInitializer" class="headerlink" title="1. web项目启动注册requestMappingHandlerAdapter的时候会初始化WebBindingInitializer"></a>1. web项目启动注册requestMappingHandlerAdapter的时候会初始化WebBindingInitializer</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">adapter<span class="token punctuation">.</span><span class="token function">setWebBindingInitializer</span><span class="token punctuation">(</span><span class="token function">getConfigurableWebBindingInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="2-而ConfigurableWebBindingInitializer需要FormattingConversionService-而FormattingConversionService会将所有的Converter添加进来"><a href="#2-而ConfigurableWebBindingInitializer需要FormattingConversionService-而FormattingConversionService会将所有的Converter添加进来" class="headerlink" title="2. 而ConfigurableWebBindingInitializer需要FormattingConversionService, 而FormattingConversionService会将所有的Converter添加进来"></a>2. 而ConfigurableWebBindingInitializer需要FormattingConversionService, 而FormattingConversionService会将所有的Converter添加进来</h2><p>添加的时候需要获取泛型信息</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> converter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GenericConverter</span> converter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">GenericConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Formatter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> formatter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">Formatter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addFormatter</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3-添加Converter-class-一般是通过接口获取两个泛型的具体类型"><a href="#3-添加Converter-class-一般是通过接口获取两个泛型的具体类型" class="headerlink" title="3. 添加Converter.class 一般是通过接口获取两个泛型的具体类型"></a>3. 添加Converter.class 一般是通过接口获取两个泛型的具体类型</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ResolvableType</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token constant">NONE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">NONE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resolved <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> resolved <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResolvableType</span> interfaceType <span class="token operator">:</span> <span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResolvableType</span> interfaceAsType <span class="token operator">=</span> interfaceType<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceAsType <span class="token operator">!=</span> <span class="token constant">NONE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> interfaceAsType<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">getSuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-Lambda表达式的接口是Converter，不能的到具体的类型"><a href="#4-Lambda表达式的接口是Converter，不能的到具体的类型" class="headerlink" title="4. Lambda表达式的接口是Converter&lt;?, ?&gt;，不能的到具体的类型"></a>4. Lambda表达式的接口是Converter&lt;?, ?&gt;，不能的到具体的类型</h2><h1 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h1><h2 id="3-1、具体类型接口-不再是泛型"><a href="#3-1、具体类型接口-不再是泛型" class="headerlink" title="3.1、具体类型接口,不再是泛型"></a>3.1、具体类型接口,不再是泛型</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">StringToLocalDateTimeConverter</span> <span class="token function">localDateTimeConverter1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">(</span>source <span class="token operator">-></span>  <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>source<span class="token punctuation">,</span> <span class="token class-name">DateTimeUtils</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">StringToLocalDateTimeConverter</span> <span class="token keyword">extends</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3-2、等待requestMappingHandlerAdapter注册结束在注册"><a href="#3-2、等待requestMappingHandlerAdapter注册结束在注册" class="headerlink" title="3.2、等待requestMappingHandlerAdapter注册结束在注册"></a>3.2、等待requestMappingHandlerAdapter注册结束在注册</h2><blockquote><p>就是等requestMappingHandlerAdapterbean注册完成之后再添加自己的converter就不会注册到FormattingConversionService中</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"requestMappingHandlerAdapter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">></span></span> <span class="token function">localDateTimeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> source <span class="token operator">-></span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token class-name">DateTimeUtils</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>2022年8月8日14:15:00修改</p></blockquote><blockquote><p>如果实在stater中进行使用则应该使用@DependsOn注解,依旧是启动顺序的问题</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">"requestMappingHandlerAdapter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">></span></span> <span class="token function">dateConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> source <span class="token operator">-></span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3-3、自定义Converter接口"><a href="#3-3、自定义Converter接口" class="headerlink" title="3.3、自定义Converter&lt;S,T&gt;接口"></a>3.3、自定义Converter&lt;S,T&gt;接口</h2><blockquote><p>其实有点类似第一种解决方案</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决actuator访问gateway相关端点404</title>
    <link href="/2022/12/java/b007/"/>
    <url>/2022/12/java/b007/</url>
    
    <content type="html"><![CDATA[<h1 id="一、场景复现"><a href="#一、场景复现" class="headerlink" title="一、场景复现"></a>一、场景复现</h1><h2 id="1、spring-cloud-版本"><a href="#1、spring-cloud-版本" class="headerlink" title="1、spring cloud 版本"></a>1、spring cloud 版本</h2><blockquote><p>2022.0.0-RC2</p></blockquote><h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 端点检查放开所有</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h1><p>配置文件改了.</p><h1 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h1><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always    <span class="token comment"># 重点在这里,默认为false,所以没有gateway相关端点,打开后就可以访问</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>element plus table中双击编辑后回车和失去焦点绑定同一个事件会导致执行两次</title>
    <link href="/2022/10/FE/b002/"/>
    <url>/2022/10/FE/b002/</url>
    
    <content type="html"><![CDATA[<h1 id="一、场景复现"><a href="#一、场景复现" class="headerlink" title="一、场景复现"></a>一、场景复现</h1><h2 id="0、项目环境"><a href="#0、项目环境" class="headerlink" title="0、项目环境"></a>0、项目环境</h2><ul><li>VUE3</li><li>Vite</li><li>TypeScript</li><li>Element Plus</li></ul><h2 id="1、相关代码"><a href="#1、相关代码" class="headerlink" title="1、相关代码"></a>1、相关代码</h2><p><img src="/images/blog/vue/b-2-1.png" alt="原始代码"></p><p><img src="/images/blog/vue/b-2-2.png" alt="控制台打印两次执行信息"></p><h1 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h1><p>回车时候执行了一次,然后input矿失去了焦点,再次触发了相同的事件</p><p>可能是TypeScript环境的问题,导致直接在回车事件中使用$event.target.blur报错.</p><h1 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h1><p>回车的事件重新绑定一个方法<br><img src="/images/blog/vue/b-2-3.png" alt="绑定方法"></p><p>方法中主动触发blur事件</p><p><img src="/images/blog/vue/b-2-4.png" alt="blur触发"></p>]]></content>
    
    
    <categories>
      
      <category>FE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Object 转换 List&lt;Object&gt;</title>
    <link href="/2020/07/java/b008/"/>
    <url>/2020/07/java/b008/</url>
    
    <content type="html"><![CDATA[<h1 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1 使用场景"></a>1 使用场景</h1><p>使用的时候IDEA会提示警告 说未检查类型.</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Obj</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2 解决办法"></a>2 解决办法</h1><ol><li>使用@SuperWarning({“unchecked”})进行压制</li><li>写个工具类进行转换</li></ol><h2 id="2-1-方法1"><a href="#2-1-方法1" class="headerlink" title="2.1 方法1"></a>2.1 方法1</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuperWarning</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">Obj</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-2-方法2"><a href="#2-2-方法2" class="headerlink" title="2.2 方法2"></a>2.2 方法2</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">objConvertList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Html5+ Plus 踩过的坑</title>
    <link href="/2019/06/FE/b004/"/>
    <url>/2019/06/FE/b004/</url>
    
    <content type="html"><![CDATA[<h2 id="一-plus-storage部分"><a href="#一-plus-storage部分" class="headerlink" title="一 plus.storage部分"></a>一 plus.storage部分</h2><blockquote><ol><li>plus.storage.setItem(key,value);</li></ol></blockquote><p><code>注意事项: key 和 value 都只能是**字符串**,如果是数字的话,存进去,取不出来</code><br><code>plus.storage.setItem(&quot;key&quot;  ,String(value)); value 最好用String强转一下,以防万一</code></p>]]></content>
    
    
    <categories>
      
      <category>FE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap 3 轮播图组件(Carousel) 获取当前显示图片的索引</title>
    <link href="/2019/06/FE/b003/"/>
    <url>/2019/06/FE/b003/</url>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>Events<br>Bootstrap’s carousel class exposes two events for hooking into carousel functionality.</p><p>Both events have the following additional properties:</p><p><strong>direction</strong>      : The direction in which the carousel is sliding (either “left” or “right”).<br><strong>relatedTarget</strong>: The DOM element that is being slid into place as the active item.</p><h5 id="有两个回调方法"><a href="#有两个回调方法" class="headerlink" title="有两个回调方法"></a>有两个回调方法</h5><table><thead><tr><th>Event Type</th><th>Description</th></tr></thead><tbody><tr><td>slide.bs.carousel</td><td>This event fires immediately when the slide instance method is invoked.</td></tr><tr><td>slid.bs.carousel</td><td>This event is fired when the carousel has completed its slide transition.</td></tr></tbody></table><h2 id="两个回调方法都可以使用"><a href="#两个回调方法都可以使用" class="headerlink" title="两个回调方法都可以使用"></a>两个回调方法都可以使用</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$(选择器).on(&#39;slide.bs.carousel&#39;, function (obj) &#123;        &#x2F;&#x2F; 当前轮播索引        var index &#x3D; $(this).find(&#39;.item&#39;).index(obj.relatedTarget);        console.log(&quot;索引:&quot; + index); &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>此方法针对bootstrap 3使用<br>网上的.getActiveIndex()方法，适用于bootsrap v3.0.2,如果出现无法获取的情况可以试试我这个方法</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>FE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
